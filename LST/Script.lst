C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SCRIPT
OBJECT MODULE PLACED IN .\OBJ\Script.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\Script.c BROWSE DEBUG OBJECTEXTEND PRINT(.\LST\Script.lst) OBJECT(.\OBJ
                    -\Script.obj)

line level    source

   1          /*-----------------------------*
   2           *  include head files         *
   3           *----------------------------*/
   4          #include ".\Head\HD_cfg.h"
   5          #include ".\Head\Time.h"
   6          #include ".\Head\Script.h"
   7          #include ".\Head\TempCtr.h"
   8          #include ".\Head\System.h"
   9          #include ".\head\SinoLib.h"
  10          
  11          /*-----------------------------*
  12           *  Macros for constants       *
  13           *----------------------------*/
  14          #define         BOIL_TEMP_SIZE          12              //临时数据缓冲的大小
  15          #define         BOIL_OFFSET_VAL         1               //判断沸点的偏移值
  16          #define         BOIL_DATA_PER_MIN       12          //每分钟更新数据数
  17          
  18          /*-----------------------------*
  19           *  Macros for others          *
  20           *----------------------------*/
  21          
  22          
  23          /*-----------------------------*
  24           *  type definitions           *
  25           *----------------------------*/
  26          
  27          
  28          /*-----------------------------*
  29           *  structure,union and enum   *
  30           *----------------------------*/
  31          
  32          
  33          /*-----------------------------*
  34           *  public functions prototypes*
  35           *----------------------------*/
  36          void    ScriptProc(void);
  37          //void  BoilCheckProc(void);
  38          #ifdef  DEBUG0
  39          uint8   GetScriptStage(void);
  40          #endif
  41          void    ResetCurScript(void);
  42          void    SetCurScript(uint8 u8ID,uint8 u8texture);
  43          void    SetBotTemp(uint8 code *pScript);
  44          //void  SetPowerLevel(uint8     code *pScript);
  45          void    Heat_Ctr(uint8  code *pScript);
  46          uint8   OtherCmds(uint8 code *pScript);
  47          uint8   ByTemp_ChgStage(uint8 code *pScript);
  48          uint8   ByTime_ChgStage(uint8 code *pScript);
  49          void    ChangeScriptStage(uint8 u8Stage);
  50          void    GetPowerByDT(void);
  51          
  52          /*-----------------------------*
  53           *  static functions prototypes*
  54           *----------------------------*/
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 2   

  55          
  56          
  57          /*-----------------------------*
  58           *  public variable declaration*
  59           *----------------------------*/
  60          uint8   code    *m_u8pBaseScript        =       NULL;
  61          uint8   code    *m_u8pScript            =       NULL;
  62          uint8   m_u8ScriptStage         =       0;                              //script状态
  63          uint16  m_u16CookTime           =       0;                              //烹饪时间,以秒为单位
  64          uint8   m_u8AddOnParam          =       0;                              //临时参数
  65          uint8   m_u8AddOffParam         =       0;
  66          uint16  m_u16IntCookTime        =       0;                          //间隔烹饪时间,以秒为单位
  67          uint16  idata   g_u16VarParam[8];               //烹饪可调参数
  68          
  69          //火力控制
  70          uint8   idata m_u8OffsetTemp    =       0;                              //偏移温度
  71          uint8   idata m_u8TargetTemp    =       0;                              //目标温度
  72          uint8   idata m_u8EstimateTemp  =   0;              //预估温度
  73          uint8   idata m_u8PwrCycle              =       0;                              //调功周期
  74          uint8   idata m_u8OnTimeInc             =       0;                              //加热时间增量
  75          uint8   idata m_u8OnTimeDec             =       0;                              //加热时间减量
  76          uint8   idata m_u8MinOnTime_Set =       0;                              //最小加热时间
  77          uint8   idata m_u8MaxOnTime_set =       0;                              //最大加热时间  
  78                                      
  79          //沸腾判断
  80          //uint8 idata   u8BoilTempBuf[BOIL_TEMP_SIZE];  //临时数据缓冲
  81          //uint8 idata   u8BoilTempBufBAK[BOIL_TEMP_SIZE]; //数据备份
  82          //uint8 idata   u8BoilChkCnt    =       0;                      
  83          //uint8 idata   m_u8BoilChkTime =       0;
  84          //uint8 idata   m_u8BoilDegree  =       0;      
  85          
  86          
  87          uint8   code    m_u8aWhiteRice_Nutritious_Soft[] =
  88          {
  89                  0x05,0x13,0x1E,0x2C,0x3F,
  90                  //------------====== ×′ì? 0 ======-------------
  91                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
  92                  0x05,0xF1,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
  93                  0x03,0x46,0x81,          //?￥2????è′óóú???¨???èì?×a
  94                  0xFF,          //×′ì??áê?
  95                  //------------====== ×′ì? 1 ======-------------
  96                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //μ×2????è・??§
  97                  0x05,0xF2,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
  98                  0xFF,          //×′ì??áê?
  99                  //------------====== ×′ì? 2 ======-------------
 100                  0x00,0x87,0x8C,0x19,0x05,0x00,          //μ×2????è・??§
 101                  0x03,0x5D,0x83,          //?￥2????è′óóú???¨???èì?×a
 102                  0x05,0x08,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 103                  0xFF,          //×′ì??áê?
 104                  //------------====== ×′ì? 3 ======-------------
 105                  0x00,0x78,0x82,0xF1,0xF1,0x00,          //μ×2????è・??§
 106                  0x05,0xF5,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 107                  0x01,0x7D,0x84,          //μ×2????è′óóú???¨???èì?×a
 108                  0x0E,0x03,0x00,0x02,0x00,          //ì?±e??á?
 109                  0xFF,          //×′ì??áê?
 110                  //------------====== ×′ì? 4 ======-------------
 111                  0x00,0x66,0x6E,0x05,0x1E,0x00,          //μ×2????è・??§
 112                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 113                  0xFF,          //×′ì??áê?
 114          
 115          };
 116          
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 3   

 117          uint8   code    m_u8aWhiteRice_Hard_Normal[] =
 118          {
 119              0x05,0x13,0x1E,0x2C,0x3A,
 120                  //------------====== 状态 0 ======-------------
 121                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 122                  0x05,0x06,0x00,0x81,          //烹饪时间大于指定分钟跳转
 123                  0x03,0x46,0x81,          //顶部温度大于指定温度跳转
 124                  0xFF,          //状态结束
 125                  //------------====== 状态 1 ======-------------
 126                  0x00,0x4C,0x4E,0x0A,0x14,0x00,          //底部温度范围
 127                  0x07,0x14,0x00,0x82,          //烹饪时间大于指定秒钟跳转
 128                  0xFF,          //状态结束
 129                  //------------====== 状态 2 ======-------------
 130                  0x00,0x87,0x8C,0xF0,0x05,0x00,          //底部温度范围
 131                  0x03,0x5D,0x83,          //顶部温度大于指定温度跳转
 132                  0x05,0x08,0x00,0x83,          //烹饪时间大于指定分钟跳转
 133                  0xFF,          //状态结束
 134                  //------------====== 状态 3 ======-------------
 135                  0x00,0x78,0x82,0x0A,0x14,0x00,          //底部温度范围
 136                  0x05,0xF5,0x00,0x84,          //烹饪时间大于指定分钟跳转
 137                  0x01,0x7D,0x84,          //底部温度大于指定温度跳转
 138                  0xFF,          //状态结束
 139                  //------------====== 状态 4 ======-------------
 140                  0x00,0x66,0x6E,0x05,0x1E,0x00,          //底部温度范围
 141                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 142                  0xFF,          //状态结束
 143          };
 144          
 145          uint8   code    m_u8aBrownRice_Nutritious[] =
 146          {
 147              0x07,0x15,0x20,0x2E,0x39,0x47,0x55,
 148                  //------------====== 状态 0 ======-------------
 149                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 150                  0x05,0xF1,0x00,0x81,          //烹饪时间大于指定分钟跳转
 151                  0x03,0x3C,0x81,          //顶部温度大于指定温度跳转
 152                  0xFF,          //状态结束
 153                  //------------====== 状态 1 ======-------------
 154                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //底部温度范围
 155                  0x05,0xF2,0x00,0x82,          //烹饪时间大于指定分钟跳转
 156                  0xFF,          //状态结束
 157                  //------------====== 状态 2 ======-------------
 158                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 159                  0x05,0xF3,0x00,0x83,          //烹饪时间大于指定分钟跳转
 160                  0x03,0x55,0x83,          //顶部温度大于指定温度跳转
 161                  0xFF,          //状态结束
 162                  //------------====== 状态 3 ======-------------
 163                  0x00,0xF2,0xF2,0x0A,0x14,0x00,          //底部温度范围
 164                  0x05,0xF4,0x00,0x84,          //烹饪时间大于指定分钟跳转
 165                  0xFF,          //状态结束
 166                  //------------====== 状态 4 ======-------------
 167                  0x00,0x87,0x8C,0xF0,0x05,0x00,          //底部温度范围
 168                  0x05,0x05,0x00,0x85,          //烹饪时间大于指定分钟跳转
 169                  0x03,0x5D,0x85,          //顶部温度大于指定温度跳转
 170                  0xFF,          //状态结束
 171                  //------------====== 状态 5 ======-------------
 172                  0x00,0x78,0x82,0x14,0x0A,0x00,          //底部温度范围
 173                  0x01,0x7D,0x86,          //底部温度大于指定温度跳转
 174                  0x05,0xF5,0x00,0x86,          //烹饪时间大于指定分钟跳转
 175                  0xFF,          //状态结束
 176                  //------------====== 状态 6 ======-------------
 177                  0x00,0x66,0x6C,0x05,0x1E,0x00,          //底部温度范围
 178                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 4   

 179                  0xFF,          //状态结束
 180          
 181          };
 182          
 183          uint8   code    m_u8aBrownRice_Hard[] =
 184          {
 185              0x05,0x13,0x1E,0x2C,0x3A,
 186                  //------------====== 状态 0 ======-------------
 187                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 188                  0x05,0x06,0x00,0x81,          //烹饪时间大于指定分钟跳转
 189                  0x03,0x3C,0x81,          //顶部温度大于指定温度跳转
 190                  0xFF,          //状态结束
 191                  //------------====== 状态 1 ======-------------
 192                  0x00,0x46,0x48,0x0A,0x14,0x00,          //底部温度范围
 193                  0x07,0x0A,0x00,0x82,          //烹饪时间大于指定秒钟跳转
 194                  0xFF,          //状态结束
 195                  //------------====== 状态 2 ======-------------
 196                  0x00,0x87,0x8C,0xF0,0x05,0x00,          //底部温度范围
 197                  0x05,0x08,0x00,0x83,          //烹饪时间大于指定分钟跳转
 198                  0x03,0x5D,0x83,          //顶部温度大于指定温度跳转
 199                  0xFF,          //状态结束
 200                  //------------====== 状态 3 ======-------------
 201                  0x00,0x78,0x82,0x14,0x0A,0x00,          //底部温度范围
 202                  0x01,0x7D,0x84,          //底部温度大于指定温度跳转
 203                  0x05,0xF5,0x00,0x84,          //烹饪时间大于指定分钟跳转
 204                  0xFF,          //状态结束
 205                  //------------====== 状态 4 ======-------------
 206                  0x00,0x66,0x6C,0x05,0x1E,0x00,          //底部温度范围
 207                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 208                  0xFF,          //状态结束
 209          
 210          };
 211          
 212          uint8   code    m_u8aBrownRice_Normal_Soft[] =
 213          {
 214              0x05,0x13,0x1E,0x2C,0x3A,
 215                  //------------====== 状态 0 ======-------------
 216                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 217                  0x05,0xF1,0x00,0x81,          //烹饪时间大于指定分钟跳转
 218                  0x03,0x3C,0x81,          //顶部温度大于指定温度跳转
 219                  0xFF,          //状态结束
 220                  //------------====== 状态 1 ======-------------
 221                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //底部温度范围
 222                  0x05,0xF2,0x00,0x82,          //烹饪时间大于指定分钟跳转
 223                  0xFF,          //状态结束
 224                  //------------====== 状态 2 ======-------------
 225                  0x00,0x87,0x8C,0xF0,0x05,0x00,          //底部温度范围
 226                  0x05,0x08,0x00,0x83,          //烹饪时间大于指定分钟跳转
 227                  0x03,0x5D,0x83,          //顶部温度大于指定温度跳转
 228                  0xFF,          //状态结束
 229                  //------------====== 状态 3 ======-------------
 230                  0x00,0x78,0x82,0x14,0x0A,0x00,          //底部温度范围
 231                  0x01,0x7D,0x84,          //底部温度大于指定温度跳转
 232                  0x05,0xF5,0x00,0x84,          //烹饪时间大于指定分钟跳转
 233                  0xFF,          //状态结束
 234                  //------------====== 状态 4 ======-------------
 235                  0x00,0x66,0x6C,0x05,0x1E,0x00,          //底部温度范围
 236                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 237                  0xFF,          //状态结束
 238          
 239          };
 240          
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 5   

 241          uint8   code    m_u8aBuckWheat_Nutritious_Soft[] =      
 242          {
 243                  0x06,0x14,0x1F,0x2D,0x38,0x47,
 244                  //------------====== ×′ì? 0 ======-------------
 245                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 246                  0x05,0xF1,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
 247                  0x03,0x46,0x81,          //?￥2????è′óóú???¨???èì?×a
 248                  0xFF,          //×′ì??áê?
 249                  //------------====== ×′ì? 1 ======-------------
 250                  0x00,0xF1,0xF1,0x14,0x0A,0x00,          //μ×2????è・??§
 251                  0x05,0xF2,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 252                  0xFF,          //×′ì??áê?
 253                  //------------====== ×′ì? 2 ======-------------
 254                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 255                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 256                  0x05,0x08,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 257                  0xFF,          //×′ì??áê?
 258                  //------------====== ×′ì? 3 ======-------------
 259                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 260                  0x05,0xF5,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 261                  0xFF,          //×′ì??áê?
 262                  //------------====== ×′ì? 4 ======-------------
 263                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 264                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 265                  0x01,0x7D,0x85,          //μ×2????è′óóú???¨???èì?×a
 266                  0xFF,          //×′ì??áê?
 267                  //------------====== ×′ì? 5 ======-------------
 268                  0x0E,0x01,0x00,0x00,0x00,          //ì?±e??á?
 269                  0xFF,          //×′ì??áê?
 270          
 271          };
 272          
 273          uint8   code    m_u8aBuckWheat_Hard[] = 
 274          {
 275                  0x06,0x14,0x1F,0x2D,0x38,0x47,
 276                  //------------====== ×′ì? 0 ======-------------
 277                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 278                  0x05,0x06,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
 279                  0x03,0x46,0x81,          //?￥2????è′óóú???¨???èì?×a
 280                  0xFF,          //×′ì??áê?
 281                  //------------====== ×′ì? 1 ======-------------
 282                  0x00,0x4C,0x4E,0x0A,0x14,0x00,          //μ×2????è・??§
 283                  0x07,0x0A,0x00,0x82,          //??a?ê±??′óóú???¨???óì?×a
 284                  0xFF,          //×′ì??áê?
 285                  //------------====== ×′ì? 2 ======-------------
 286                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 287                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 288                  0x05,0x08,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 289                  0xFF,          //×′ì??áê?
 290                  //------------====== ×′ì? 3 ======-------------
 291                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 292                  0x05,0xF5,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 293                  0xFF,          //×′ì??áê?
 294                  //------------====== ×′ì? 4 ======-------------
 295                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 296                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 297                  0x01,0x7D,0x85,          //μ×2????è′óóú???¨???èì?×a
 298                  0xFF,          //×′ì??áê?
 299                  //------------====== ×′ì? 5 ======-------------
 300                  0x0E,0x01,0x00,0x00,0x00,          //ì?±e??á?
 301                  0xFF,          //×′ì??áê?
 302          
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 6   

 303          };
 304          
 305          uint8   code    m_u8aQuinoa_Nutritious[] =
 306          {
 307                  0x05,0x0F,0x1A,0x28,0x37,
 308                  //------------====== ×′ì? 0 ======-------------
 309                  0x00,0x28,0x28,0xF0,0x05,0x00,          //μ×2????è・??§
 310                  0x01,0x24,0x81,          //μ×2????è′óóú???¨???èì?×a
 311                  0xFF,          //×′ì??áê?
 312                  //------------====== ×′ì? 1 ======-------------
 313                  0x00,0x26,0x26,0x05,0x19,0x00,          //μ×2????è・??§
 314                  0x05,0x78,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 315                  0xFF,          //×′ì??áê?
 316                  //------------====== ×′ì? 2 ======-------------
 317                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 318                  0x05,0x0E,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 319                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 320                  0xFF,          //×′ì??áê?
 321                  //------------====== ×′ì? 3 ======-------------
 322                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 323                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 324                  0x01,0x7D,0x84,          //μ×2????è′óóú???¨???èì?×a
 325                  0xFF,          //×′ì??áê?
 326                  //------------====== ×′ì? 4 ======-------------
 327                  0x0E,0x01,0x00,0x00,0x00,          //ì?±e??á?
 328                  0xFF,          //×′ì??áê?
 329          
 330          };
 331          
 332          uint8   code    m_u8aQuinoa_Hard_Normal[] =
 333          {
 334                  0x05,0x0F,0x1A,0x28,0x37,
 335                  //------------====== ×′ì? 0 ======-------------
 336                  0x00,0x28,0x28,0xF0,0x05,0x00,          //μ×2????è・??§
 337                  0x01,0x24,0x81,          //μ×2????è′óóú???¨???èì?×a
 338                  0xFF,          //×′ì??áê?
 339                  //------------====== ×′ì? 1 ======-------------
 340                  0x00,0x26,0x26,0x05,0x19,0x00,          //μ×2????è・??§
 341                  0x07,0x0A,0x00,0x82,          //??a?ê±??′óóú???¨???óì?×a
 342                  0xFF,          //×′ì??áê?
 343                  //------------====== ×′ì? 2 ======-------------
 344                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 345                  0x05,0x10,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 346                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 347                  0xFF,          //×′ì??áê?
 348                  //------------====== ×′ì? 3 ======-------------
 349                  0x00,0x78,0x82,0x0A,0x14,0x00,          //μ×2????è・??§
 350                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 351                  0x01,0x7D,0x84,          //μ×2????è′óóú???¨???èì?×a
 352                  0xFF,          //×′ì??áê?
 353                  //------------====== ×′ì? 4 ======-------------
 354                  0x0E,0x01,0x00,0x00,0x00,          //ì?±e??á?
 355                  0xFF,          //×′ì??áê?
 356          
 357          };
 358          
 359          uint8   code    m_u8aLentils_Nutritious_Hard[] =
 360          {
 361                  0x05,0x13,0x1E,0x2C,0x3A,
 362                  //------------====== ×′ì? 0 ======-------------
 363                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 364                  0x05,0xF1,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 7   

 365                  0x03,0x3C,0x81,          //?￥2????è′óóú???¨???èì?×a
 366                  0xFF,          //×′ì??áê?
 367                  //------------====== ×′ì? 1 ======-------------
 368                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //μ×2????è・??§
 369                  0x05,0xF2,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 370                  0xFF,          //×′ì??áê?
 371                  //------------====== ×′ì? 2 ======-------------
 372                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 373                  0x05,0x0A,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 374                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 375                  0xFF,          //×′ì??áê?
 376                  //------------====== ×′ì? 3 ======-------------
 377                  0x00,0x78,0x82,0x0C,0x14,0x00,          //μ×2????è・??§
 378                  0x05,0x10,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 379                  0x01,0x78,0x84,          //μ×2????è′óóú???¨???èì?×a
 380                  0xFF,          //×′ì??áê?
 381                  //------------====== ×′ì? 4 ======-------------
 382                  0x00,0x1E,0x1E,0x05,0x19,0x00,          //μ×2????è・??§
 383                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 384                  0xFF,          //×′ì??áê?
 385          
 386          };
 387          
 388          uint8   code    m_u8aLentils_Soft[] =
 389          {
 390                  0x05,0x13,0x1E,0x2C,0x3A,
 391                  //------------====== ×′ì? 0 ======-------------
 392                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 393                  0x05,0xF1,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
 394                  0x03,0x3C,0x81,          //?￥2????è′óóú???¨???èì?×a
 395                  0xFF,          //×′ì??áê?
 396                  //------------====== ×′ì? 1 ======-------------
 397                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //μ×2????è・??§
 398                  0x05,0xF2,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 399                  0xFF,          //×′ì??áê?
 400                  //------------====== ×′ì? 2 ======-------------
 401                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 402                  0x05,0x0A,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 403                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 404                  0xFF,          //×′ì??áê?
 405                  //------------====== ×′ì? 3 ======-------------
 406                  0x00,0x78,0x82,0x0C,0x14,0x00,          //μ×2????è・??§
 407                  0x05,0x16,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 408                  0x01,0x78,0x84,          //μ×2????è′óóú???¨???èì?×a
 409                  0xFF,          //×′ì??áê?
 410                  //------------====== ×′ì? 4 ======-------------
 411                  0x00,0x1E,0x1E,0x05,0x19,0x00,          //μ×2????è・??§
 412                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 413                  0xFF,          //×′ì??áê?
 414                  
 415          };
 416          
 417          uint8   code    m_u8aBeans_Nutritious_Normal_stage1[] =
 418          {
 419              0x03,0x0D,0x18,
 420                  //------------====== 状态 0 ======-------------
 421                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 422                  0x03,0x5A,0x81,          //顶部温度大于指定温度跳转
 423                  0xFF,          //状态结束
 424                  //------------====== 状态 1 ======-------------
 425                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 426                  0x05,0x05,0x00,0x82,          //烹饪时间大于指定分钟跳转
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 8   

 427                  0xFF,          //状态结束
 428                  //------------====== 状态 2 ======-------------
 429                  0x00,0x46,0x48,0x0A,0x14,0x00,          //底部温度范围
 430                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 431                  0xFF,          //状态结束
 432          
 433          };
 434          
 435          uint8   code    m_u8aBeans_Nutritious_stage2[] =
 436          {
 437                  0x03,0x0D,0x1B,
 438                  //------------====== ×′ì? 0 ======-------------
 439                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //μ×2????è・??§
 440                  0x03,0x5C,0x81,          //?￥2????è′óóú???¨???èì?×a
 441                  0xFF,          //×′ì??áê?
 442                  //------------====== ×′ì? 1 ======-------------
 443                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //μ×2????è・??§
 444                  0x01,0x87,0x82,          //μ×2????è′óóú???¨???èì?×a
 445                  0x05,0x78,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 446                  0xFF,          //×′ì??áê?
 447                  //------------====== ×′ì? 2 ======-------------
 448                  0x00,0x78,0x82,0x06,0x18,0x00,          //μ×2????è・??§
 449                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 450                  0xFF,          //×′ì??áê?
 451          
 452          };
 453          
 454          uint8   code    m_u8aBeans_Normal_stage2[] =
 455          {
 456                  0x03,0x0D,0x1B,
 457                  //------------====== ×′ì? 0 ======-------------
 458                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //μ×2????è・??§
 459                  0x03,0x5C,0x81,          //?￥2????è′óóú???¨???èì?×a
 460                  0xFF,          //×′ì??áê?
 461                  //------------====== ×′ì? 1 ======-------------
 462                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //μ×2????è・??§
 463                  0x01,0x87,0x82,          //μ×2????è′óóú???¨???èì?×a
 464                  0x05,0x3C,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 465                  0xFF,          //×′ì??áê?
 466                  //------------====== ×′ì? 2 ======-------------
 467                  0x00,0x78,0x82,0x0C,0x14,0x00,          //μ×2????è・??§
 468                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 469                  0xFF,          //×′ì??áê?
 470                  
 471          };
 472          
 473          uint8   code    m_u8aBabyPorridge[] =
 474          {       
 475              0x04,0x17,0x2A,0x3A,
 476                  //------------====== 状态 0 ======-------------
 477                  0x00,0x6E,0x7D,0xF0,0x05,0x00,          //底部温度范围
 478                  0x03,0x3C,0x01,          //顶部温度大于指定温度跳转
 479                  0x0E,0x03,0x02,0x3C,0x14,          //特别指令
 480                  0x05,0x0F,0x00,0x01,          //烹饪时间大于指定分钟跳转
 481                  0xFF,          //状态结束
 482                  //------------====== 状态 1 ======-------------
 483                  0x00,0x6E,0x78,0xF1,0xF1,0x00,          //底部温度范围
 484                  0x03,0x5A,0x82,          //顶部温度大于指定温度跳转
 485                  0x0E,0x03,0x03,0x5A,0x02,          //特别指令
 486                  0x05,0x0F,0x00,0x82,          //烹饪时间大于指定分钟跳转
 487                  0xFF,          //状态结束
 488                  //------------====== 状态 2 ======-------------
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 9   

 489                  0x00,0x28,0x2D,0x05,0x37,0x00,          //底部温度范围
 490                  0x07,0x05,0x00,0x83,          //烹饪时间大于指定秒钟跳转
 491                  0x0E,0x03,0x00,0x00,0x00,          //特别指令
 492                  0xFF,          //状态结束
 493                  //------------====== 状态 3 ======-------------
 494                  0x00,0x60,0x61,0xF2,0xF2,0x00,          //底部温度范围
 495                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 496                  0xFF,          //状态结束
 497          };
 498          
 499          //uint8   code    m_u8aBeans_BrownRice_stage1[] =
 500          //{
 501          //    0x03,0x0D,0x18,
 502          //      //------------====== 状态 0 ======-------------
 503          //      0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 504          //      0x03,0x5A,0x81,          //顶部温度大于指定温度跳转
 505          //      0xFF,          //状态结束
 506          //      //------------====== 状态 1 ======-------------
 507          //      0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 508          //      0x05,0x05,0x00,0x82,          //烹饪时间大于指定分钟跳转
 509          //      0xFF,          //状态结束
 510          //      //------------====== 状态 2 ======-------------
 511          //      0x00,0x46,0x48,0x0A,0x14,0x00,          //底部温度范围
 512          //      0x0E,0x02,0x00,0x00,0x00,          //特别指令
 513          //      0xFF,          //状态结束
 514          //};
 515          
 516          //uint8   code    m_u8aBeans_BrownRice_stage2[] =
 517          //{
 518          //    0x02,0x0C,
 519          //      //------------====== 状态 0 ======-------------
 520          //      0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 521          //      0x03,0x5A,0x81,          //顶部温度大于指定温度跳转
 522          //      0xFF,          //状态结束
 523          //      //------------====== 状态 1 ======-------------
 524          //      0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 525          //      0x0E,0x02,0x00,0x00,0x00,          //特别指令
 526          //      0xFF,          //状态结束
 527          //};
 528          
 529          uint8   code    m_u8aBrownRice_Lentiles[] =
 530          {
 531                  0x06,0x14,0x1F,0x2D,0x3B,0x4A,
 532                  //------------====== ×′ì? 0 ======-------------
 533                  0x00,0x78,0x82,0x1E,0x05,0x00,          //μ×2????è・??§
 534                  0x05,0xF1,0x00,0x81,          //??a?ê±??′óóú???¨・??óì?×a
 535                  0x03,0x4B,0x81,          //?￥2????è′óóú???¨???èì?×a
 536                  0xFF,          //×′ì??áê?
 537                  //------------====== ×′ì? 1 ======-------------
 538                  0x00,0xF1,0xF1,0x0A,0x14,0x00,          //μ×2????è・??§
 539                  0x05,0xF2,0x00,0x82,          //??a?ê±??′óóú???¨・??óì?×a
 540                  0xFF,          //×′ì??áê?
 541                  //------------====== ×′ì? 2 ======-------------
 542                  0x00,0x78,0x82,0xF0,0x05,0x00,          //μ×2????è・??§
 543                  0x05,0x08,0x00,0x83,          //??a?ê±??′óóú???¨・??óì?×a
 544                  0x03,0x5C,0x83,          //?￥2????è′óóú???¨???èì?×a
 545                  0xFF,          //×′ì??áê?
 546                  //------------====== ×′ì? 3 ======-------------
 547                  0x00,0x78,0x82,0x0F,0x0F,0x00,          //μ×2????è・??§
 548                  0x01,0x78,0x84,          //μ×2????è′óóú???¨???èì?×a
 549                  0x05,0x0F,0x00,0x84,          //??a?ê±??′óóú???¨・??óì?×a
 550                  0xFF,          //×′ì??áê?
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 10  

 551                  //------------====== ×′ì? 4 ======-------------
 552                  0x00,0x1E,0x1E,0x05,0x19,0x00,          //μ×2????è・??§
 553                  0x01,0x82,0x85,          //μ×2????è′óóú???¨???èì?×a
 554                  0x0E,0x02,0x00,0x00,0x00,          //ì?±e??á?
 555                  0xFF,          //×′ì??áê?
 556                  //------------====== ×′ì? 5 ======-------------
 557                  0x0E,0x01,0x00,0x00,0x00,          //ì?±e??á?
 558                  0xFF,          //×′ì??áê?
 559          };
 560          
 561          uint8   code    m_u8aChickPeas_stage1[] =
 562          {
 563              0x03,0x0D,0x18,
 564                  //------------====== 状态 0 ======-------------
 565                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 566                  0x03,0x5A,0x81,          //顶部温度大于指定温度跳转
 567                  0xFF,          //状态结束
 568                  //------------====== 状态 1 ======-------------
 569                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 570                  0x05,0x05,0x00,0x82,          //烹饪时间大于指定分钟跳转
 571                  0xFF,          //状态结束
 572                  //------------====== 状态 2 ======-------------
 573                  0x00,0x46,0x48,0x0A,0x14,0x00,          //底部温度范围
 574                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 575                  0xFF,          //状态结束
 576          };
 577          
 578          uint8   code    m_u8aChickPeas_stage2[] =
 579          {
 580                  0x02,0x0C,
 581                  //------------====== 状态 0 ======-------------
 582                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 583                  0x03,0x5A,0x81,          //顶部温度大于指定温度跳转
 584                  0xFF,          //状态结束
 585                  //------------====== 状态 1 ======-------------
 586                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 587                  0x0E,0x02,0x00,0x00,0x00,          //特别指令
 588                  0xFF,          //状态结束
 589          };
 590          
 591          uint8   code    m_u8aRisotto[] =
 592          {
 593              0x09,0x17,0x22,0x35,0x48,0x5B,0x6E,0x81,0x8C,
 594                  //------------====== 状态 0 ======-------------
 595                  0x00,0x55,0x5A,0xF0,0x05,0x00,          //底部温度范围
 596                  0x01,0x41,0x81,          //底部温度大于指定温度跳转
 597                  0x05,0x0A,0x00,0x81,          //烹饪时间大于指定分钟跳转
 598                  0xFF,          //状态结束
 599                  //------------====== 状态 1 ======-------------
 600                  0x00,0x3C,0x41,0x0F,0x1E,0x00,          //底部温度范围
 601                  0x05,0x08,0x00,0x82,          //烹饪时间大于指定分钟跳转
 602                  0xFF,          //状态结束
 603                  //------------====== 状态 2 ======-------------
 604                  0x00,0x78,0x82,0xF0,0x05,0x00,          //底部温度范围
 605                  0x03,0x37,0x03,          //顶部温度大于指定温度跳转
 606                  0x0E,0x03,0x02,0x37,0x14,          //特别指令
 607                  0x05,0x28,0x00,0x03,          //烹饪时间大于指定分钟跳转
 608                  0xFF,          //状态结束
 609                  //------------====== 状态 3 ======-------------
 610                  0x00,0x78,0x82,0xF1,0xF1,0x00,          //底部温度范围
 611                  0x03,0x52,0x84,          //顶部温度大于指定温度跳转
 612                  0x0E,0x03,0x03,0x55,0x01,          //特别指令
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 11  

 613                  0x05,0x28,0x00,0x84,          //烹饪时间大于指定分钟跳转
 614                  0xFF,          //状态结束
 615                  //------------====== 状态 4 ======-------------
 616                  0x00,0x78,0x82,0xF1,0xF1,0x00,          //底部温度范围
 617                  0x03,0x5C,0x85,          //顶部温度大于指定温度跳转
 618                  0x0E,0x03,0x03,0x62,0x01,          //特别指令
 619                  0x05,0x0C,0x00,0x85,          //烹饪时间大于指定分钟跳转
 620                  0xFF,          //状态结束
 621                  //------------====== 状态 5 ======-------------
 622                  0x00,0x82,0x87,0xF1,0xF1,0x00,          //底部温度范围
 623                  0x01,0x82,0x87,          //底部温度大于指定温度跳转
 624                  0x05,0x08,0x00,0x86,          //烹饪时间大于指定分钟跳转
 625                  0x0E,0x03,0x00,0x01,0x00,          //特别指令
 626                  0xFF,          //状态结束
 627                  //------------====== 状态 6 ======-------------
 628                  0x00,0x82,0x87,0xF1,0xF1,0x00,          //底部温度范围
 629                  0x01,0x82,0x87,          //底部温度大于指定温度跳转
 630                  0x05,0x0A,0x00,0x87,          //烹饪时间大于指定分钟跳转
 631                  0x0E,0x03,0x00,0x02,0x00,          //特别指令
 632                  0xFF,          //状态结束
 633                  //------------====== 状态 7 ======-------------
 634                  0x00,0x62,0x64,0x0A,0x1E,0x00,          //底部温度范围
 635                  0x05,0x0E,0x00,0x88,          //烹饪时间大于指定分钟跳转
 636                  0xFF,          //状态结束
 637                  //------------====== 状态 8 ======-------------
 638                  0x0E,0x01,0x00,0x00,0x00,          //特别指令
 639                  0xFF,          //状态结束
 640          };
 641          
 642          //蒸煮
 643          uint8   code    m_u8aSteam[] =  
 644          {
 645              0x03,0x10,0x1D,
 646                  //------------====== 状态 0 ======-------------
 647                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 648                  0x03,0x5A,0x01,          //顶部温度大于指定温度跳转
 649                  0x01,0x8C,0x02,          //底部温度大于指定温度跳转
 650                  0xFF,          //状态结束
 651                  //------------====== 状态 1 ======-------------
 652                  0x00,0x82,0x8C,0x1E,0x14,0x00,          //底部温度范围
 653                  0x04,0x58,0x00,          //顶部温度小于指定温度跳转
 654                  0x01,0x8C,0x02,          //底部温度大于指定温度跳转
 655                  0xFF,          //状态结束
 656                  //------------====== 状态 2 ======-------------
 657                  0x0E,0x01,0x00,0x00,0x00,          //特别指令
 658                  0xFF,          //状态结束
 659          
 660          };
 661          
 662          uint8   code    m_u8aSlowcook[] = 
 663          {
 664              0x02,0x0C,
 665                  //------------====== 状态 0 ======-------------
 666                  0x00,0x64,0x64,0xF0,0x05,0x00,          //底部温度范围
 667                  0x01,0x58,0x01,          //底部温度大于指定温度跳转
 668                  0xFF,          //状态结束
 669                  //------------====== 状态 1 ======-------------
 670                  0x00,0x64,0x64,0x0A,0x14,0x00,          //底部温度范围
 671                  0x02,0x55,0x00,          //底部温度小于指定温度跳转
 672                  0xFF,          //状态结束
 673          };
 674          
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 12  

 675          uint8   code    m_u8aSoup[] =
 676          {
 677                  0x02,0x0C,
 678                  //------------====== 状态 0 ======-------------
 679                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 680                  0x03,0x5A,0x01,          //顶部温度大于指定温度跳转
 681                  0xFF,          //状态结束
 682                  //------------====== 状态 1 ======-------------
 683                  0x00,0x82,0x8C,0x0C,0x14,0x00,          //底部温度范围
 684                  0x04,0x58,0x00,          //顶部温度小于指定温度跳转
 685                  0xFF,          //状态结束
 686          };
 687          
 688          uint8   code    m_u8aPasta[] =
 689          {
 690                  0x03,0x0D,0x19,
 691                  //------------====== 状态 0 ======-------------
 692                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 693                  0x03,0x58,0x01,          //顶部温度大于指定温度跳转
 694                  0xFF,          //状态结束
 695                  //------------====== 状态 1 ======-------------
 696                  0x00,0x82,0x8C,0x14,0x14,0x00,          //底部温度范围
 697                  0x0E,0x04,0x00,0x00,0x01,          //特别指令
 698                  0xFF,          //状态结束
 699                  //------------====== 状态 2 ======-------------
 700                  0x00,0x5F,0x60,0x05,0x19,0x00,          //底部温度范围
 701                  0xFF,          //状态结束
 702          };
 703          
 704          uint8   code    m_u8aCreamcheese[] =
 705          {
 706              0x03,0x10,0x1A,
 707                  //------------====== 状态 0 ======-------------
 708                  0x00,0x78,0x7D,0xF0,0x05,0x00,          //底部温度范围
 709                  0x01,0x50,0x01,          //底部温度大于指定温度跳转
 710                  0x03,0x32,0x02,          //顶部温度大于指定温度跳转
 711                  0xFF,          //状态结束
 712                  //------------====== 状态 1 ======-------------
 713                  0x00,0x70,0x72,0x0F,0x15,0x00,          //底部温度范围
 714                  0x03,0x37,0x02,          //顶部温度大于指定温度跳转
 715                  0xFF,          //状态结束
 716                  //------------====== 状态 2 ======-------------
 717                  0x00,0x50,0x50,0x0A,0x14,0x00,          //底部温度范围
 718                  0xFF,          //状态结束
 719          };
 720          
 721          uint8   code    m_u8aYoghurt[] = 
 722          {
 723                  0x02,0x0C,
 724                  //------------====== 状态 0 ======-------------
 725                  0x00,0x26,0x26,0xF0,0x05,0x00,          //底部温度范围
 726                  0x01,0x1E,0x01,          //底部温度大于指定温度跳转
 727                  0xFF,          //状态结束
 728                  //------------====== 状态 1 ======-------------
 729                  0x00,0x25,0x25,0x05,0x19,0x00,          //底部温度范围
 730                  0x02,0x1C,0x00,          //底部温度小于指定温度跳转
 731                  0xFF,          //状态结束
 732          };
 733          
 734          uint8   code    m_u8aJam[] =
 735          {
 736              0x03,0x10,0x1D,
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 13  

 737                  //------------====== 状态 0 ======-------------
 738                  0x00,0x82,0x8C,0xF0,0x05,0x00,          //底部温度范围
 739                  0x03,0x5A,0x01,          //顶部温度大于指定温度跳转
 740                  0x01,0x8C,0x02,          //底部温度大于指定温度跳转
 741                  0xFF,          //状态结束
 742                  //------------====== 状态 1 ======-------------
 743                  0x00,0x82,0x8C,0x0F,0x0F,0x00,          //底部温度范围
 744                  0x04,0x58,0x00,          //顶部温度小于指定温度跳转
 745                  0x01,0x8C,0x02,          //底部温度大于指定温度跳转
 746                  0xFF,          //状态结束
 747                  //------------====== 状态 2 ======-------------
 748                  0x0E,0x01,0x00,0x00,0x00,          //特别指令
 749                  0xFF,          //状态结束
 750          };
 751          
 752          uint8   code    m_u8aReheat_80[] = 
 753          {
 754                  0x03,0x10,0x1A,
 755                  //------------====== 状态 0 ======-------------
 756                  0x00,0x78,0x7D,0xF0,0x05,0x00,          //底部温度范围
 757                  0x01,0x50,0x01,          //底部温度大于指定温度跳转
 758                  0x03,0x32,0x02,          //顶部温度大于指定温度跳转
 759                  0xFF,          //状态结束
 760                  //------------====== 状态 1 ======-------------
 761                  0x00,0x70,0x72,0x0F,0x15,0x00,          //底部温度范围
 762                  0x03,0x32,0x02,          //顶部温度大于指定温度跳转
 763                  0xFF,          //状态结束
 764                  //------------====== 状态 2 ======-------------
 765                  0x00,0x4E,0x4E,0x0A,0x14,0x00,          //底部温度范围
 766                  0xFF,          //状态结束
 767          };
 768          
 769          uint8   code    m_u8aReheat_100[] = 
 770          {
 771                  0x03,0x10,0x1A,
 772                  //------------====== 状态 0 ======-------------
 773                  0x00,0x78,0x7D,0xF0,0x05,0x00,          //底部温度范围
 774                  0x01,0x5A,0x01,          //底部温度大于指定温度跳转
 775                  0x03,0x56,0x02,          //顶部温度大于指定温度跳转
 776                  0xFF,          //状态结束
 777                  //------------====== 状态 1 ======-------------
 778                  0x00,0x70,0x72,0x0F,0x15,0x00,          //底部温度范围
 779                  0x03,0x56,0x02,          //顶部温度大于指定温度跳转
 780                  0xFF,          //状态结束
 781                  //------------====== 状态 2 ======-------------
 782                  0x00,0x62,0x64,0x0C,0x18,0x00,          //底部温度范围
 783                  0xFF,          //状态结束
 784          };
 785          
 786          uint8   code    m_u8aTemp_30[] =
 787          {
 788                  0x02,0x0C,
 789                  //------------====== 状态 0 ======-------------
 790                  0x00,0x1E,0x1E,0xF0,0x05,0x00,          //底部温度范围
 791                  0x01,0x18,0x01,          //底部温度大于指定温度跳转
 792                  0xFF,          //状态结束
 793                  //------------====== 状态 1 ======-------------
 794                  0x00,0x1E,0x1E,0x05,0x19,0x00,          //底部温度范围
 795                  0x02,0x16,0x00,          //底部温度小于指定温度跳转
 796                  0xFF,          //状态结束
 797          };
 798          
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 14  

 799          uint8   code    m_u8aTemp_40[] =
 800          {
 801                  0x02,0x0C,
 802                  //------------====== 状态 0 ======-------------
 803                  0x00,0x28,0x28,0xF0,0x05,0x00,          //底部温度范围
 804                  0x01,0x20,0x01,          //底部温度大于指定温度跳转
 805                  0xFF,          //状态结束
 806                  //------------====== 状态 1 ======-------------
 807                  0x00,0x28,0x28,0x05,0x19,0x00,          //底部温度范围
 808                  0x02,0x1E,0x00,          //底部温度小于指定温度跳转
 809                  0xFF,          //状态结束
 810          };
 811          
 812          uint8   code    m_u8aTemp_45[] =
 813          {
 814                  0x02,0x0C,
 815                  //------------====== 状态 0 ======-------------
 816                  0x00,0x2D,0x2D,0xF0,0x05,0x00,          //底部温度范围
 817                  0x01,0x25,0x01,          //底部温度大于指定温度跳转
 818                  0xFF,          //状态结束
 819                  //------------====== 状态 1 ======-------------
 820                  0x00,0x2D,0x2D,0x05,0x19,0x00,          //底部温度范围
 821                  0x02,0x23,0x00,          //底部温度小于指定温度跳转
 822                  0xFF,          //状态结束
 823          };
 824          
 825          uint8   code    m_u8aTemp_50[] =
 826          {
 827                  0x02,0x0C,
 828                  //------------====== 状态 0 ======-------------
 829                  0x00,0x32,0x32,0xF0,0x05,0x00,          //底部温度范围
 830                  0x01,0x2A,0x01,          //底部温度大于指定温度跳转
 831                  0xFF,          //状态结束
 832                  //------------====== 状态 1 ======-------------
 833                  0x00,0x32,0x32,0x05,0x19,0x00,          //底部温度范围
 834                  0x02,0x28,0x00,          //底部温度小于指定温度跳转
 835                  0xFF,          //状态结束
 836          };
 837          
 838          uint8   code    m_u8aTemp_55[] =
 839          {
 840                  0x02,0x0C,
 841                  //------------====== 状态 0 ======-------------
 842                  0x00,0x37,0x37,0xF0,0x05,0x00,          //底部温度范围
 843                  0x01,0x2F,0x01,          //底部温度大于指定温度跳转
 844                  0xFF,          //状态结束
 845                  //------------====== 状态 1 ======-------------
 846                  0x00,0x37,0x37,0x05,0x19,0x00,          //底部温度范围
 847                  0x02,0x2D,0x00,          //底部温度小于指定温度跳转
 848                  0xFF,          //状态结束
 849          };
 850          
 851          uint8   code    m_u8aTemp_60[] =
 852          {
 853                  0x02,0x0C,
 854                  //------------====== 状态 0 ======-------------
 855                  0x00,0x3C,0x3C,0xF0,0x05,0x00,          //底部温度范围
 856                  0x01,0x34,0x01,          //底部温度大于指定温度跳转
 857                  0xFF,          //状态结束
 858                  //------------====== 状态 1 ======-------------
 859                  0x00,0x3C,0x3C,0x05,0x19,0x00,          //底部温度范围
 860                  0x02,0x32,0x00,          //底部温度小于指定温度跳转
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 15  

 861                  0xFF,          //状态结束
 862          };
 863          
 864          uint8   code    m_u8aTemp_65[] =
 865          {
 866                  0x02,0x0C,
 867                  //------------====== 状态 0 ======-------------
 868                  0x00,0x41,0x41,0xF0,0x05,0x00,          //底部温度范围
 869                  0x01,0x39,0x01,          //底部温度大于指定温度跳转
 870                  0xFF,          //状态结束
 871                  //------------====== 状态 1 ======-------------
 872                  0x00,0x40,0x40,0x05,0x19,0x00,          //底部温度范围
 873                  0x02,0x37,0x00,          //底部温度小于指定温度跳转
 874                  0xFF,          //状态结束
 875          };
 876          
 877          uint8   code    m_u8aTemp_70[] =
 878          {
 879                  0x02,0x0C,
 880                  //------------====== 状态 0 ======-------------
 881                  0x00,0x46,0x46,0xF0,0x05,0x00,          //底部温度范围
 882                  0x01,0x3E,0x01,          //底部温度大于指定温度跳转
 883                  0xFF,          //状态结束
 884                  //------------====== 状态 1 ======-------------
 885                  0x00,0x45,0x45,0x05,0x19,0x00,          //底部温度范围
 886                  0x02,0x3C,0x00,          //底部温度小于指定温度跳转
 887                  0xFF,          //状态结束
 888          };
 889          
 890          uint8   code    m_u8aTemp_75[] =
 891          {
 892                  0x02,0x0C,
 893                  //------------====== 状态 0 ======-------------
 894                  0x00,0x4B,0x4B,0xF0,0x05,0x00,          //底部温度范围
 895                  0x01,0x43,0x01,          //底部温度大于指定温度跳转
 896                  0xFF,          //状态结束
 897                  //------------====== 状态 1 ======-------------
 898                  0x00,0x4A,0x4A,0x05,0x19,0x00,          //底部温度范围
 899                  0x02,0x41,0x00,          //底部温度小于指定温度跳转
 900                  0xFF,          //状态结束
 901          };
 902          
 903          uint8   code    m_u8aTemp_80[] =
 904          {
 905                  0x02,0x0C,
 906                  //------------====== 状态 0 ======-------------
 907                  0x00,0x50,0x50,0xF0,0x05,0x00,          //底部温度范围
 908                  0x01,0x48,0x01,          //底部温度大于指定温度跳转
 909                  0xFF,          //状态结束
 910                  //------------====== 状态 1 ======-------------
 911                  0x00,0x4E,0x4E,0x05,0x19,0x00,          //底部温度范围
 912                  0x02,0x46,0x00,          //底部温度小于指定温度跳转
 913                  0xFF,          //状态结束
 914          };
 915          
 916          uint8   code    m_u8aTemp_85[] =
 917          {
 918                  0x02,0x0C,
 919                  //------------====== 状态 0 ======-------------
 920                  0x00,0x55,0x55,0xF0,0x05,0x00,          //底部温度范围
 921                  0x01,0x4D,0x01,          //底部温度大于指定温度跳转
 922                  0xFF,          //状态结束
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 16  

 923                  //------------====== 状态 1 ======-------------
 924                  0x00,0x53,0x53,0x05,0x19,0x00,          //底部温度范围
 925                  0x02,0x4B,0x00,          //底部温度小于指定温度跳转
 926                  0xFF,          //状态结束
 927          };
 928          
 929          uint8   code    m_u8aTemp_90[] =
 930          {
 931                  0x02,0x0C,
 932                  //------------====== 状态 0 ======-------------
 933                  0x00,0x5A,0x5A,0xF0,0x05,0x00,          //底部温度范围
 934                  0x01,0x50,0x01,          //底部温度大于指定温度跳转
 935                  0xFF,          //状态结束
 936                  //------------====== 状态 1 ======-------------
 937                  0x00,0x58,0x58,0x05,0x19,0x00,          //底部温度范围
 938                  0x02,0x4F,0x00,          //底部温度小于指定温度跳转
 939                  0xFF,          //状态结束
 940          };
 941          
 942          uint8   code    m_u8aTemp_95[] =
 943          {
 944                  0x02,0x0C,
 945                  //------------====== 状态 0 ======-------------
 946                  0x00,0x5F,0x5F,0xF0,0x05,0x00,          //底部温度范围
 947                  0x01,0x55,0x01,          //底部温度大于指定温度跳转
 948                  0xFF,          //状态结束
 949                  //------------====== 状态 1 ======-------------
 950                  0x00,0x5D,0x5D,0x05,0x19,0x00,          //底部温度范围
 951                  0x02,0x54,0x00,          //底部温度小于指定温度跳转
 952                  0xFF,          //状态结束
 953          };
 954          
 955          uint8   code    m_u8aTemp_Water_100[] =
 956          {
 957                  0x02,0x0C,
 958                  //------------====== 状态 0 ======-------------
 959                  0x00,0x64,0x64,0xF0,0x05,0x00,          //底部温度范围
 960                  0x01,0x58,0x01,          //底部温度大于指定温度跳转
 961                  0xFF,          //状态结束
 962                  //------------====== 状态 1 ======-------------
 963                  0x00,0x64,0x64,0x0A,0x14,0x00,          //底部温度范围
 964                  0x02,0x55,0x00,          //底部温度小于指定温度跳转
 965                  0xFF,          //状态结束
 966          };
 967          
 968          uint8   code    m_u8aTemp_Oil_100[] =
 969          {
 970                  0x05,0x0F,0x1A,0x24,0x2E,
 971                  //------------====== 状态 0 ======-------------
 972                  0x00,0x61,0x62,0xF0,0x05,0x00,          //底部温度范围
 973                  0x01,0x50,0x81,          //底部温度大于指定温度跳转
 974                  0xFF,          //状态结束
 975                  //------------====== 状态 1 ======-------------
 976                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
 977                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
 978                  0xFF,          //状态结束
 979                  //------------====== 状态 2 ======-------------
 980                  0x00,0x61,0x62,0x0A,0x0A,0x00,          //底部温度范围
 981                  0x01,0x5D,0x04,          //底部温度大于指定温度跳转
 982                  0xFF,          //状态结束
 983                  //------------====== 状态 3 ======-------------
 984                  0x00,0x61,0x62,0xF0,0x05,0x00,          //底部温度范围
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 17  

 985                  0x01,0x5D,0x04,          //底部温度大于指定温度跳转
 986                  0xFF,          //状态结束
 987                  //------------====== 状态 4 ======-------------
 988                  0x00,0x61,0x62,0xF3,0xF4,0x00,          //底部温度范围
 989                  0x02,0x5D,0x03,          //底部温度小于指定温度跳转
 990                  0xFF,          //状态结束
 991          };
 992          
 993          uint8   code    m_u8aTemp_105[] =
 994          {
 995              0x05,0x0F,0x1A,0x24,0x2E,
 996                  //------------====== 状态 0 ======-------------
 997                  0x00,0x63,0x64,0xF0,0x05,0x00,          //底部温度范围
 998                  0x01,0x52,0x81,          //底部温度大于指定温度跳转
 999                  0xFF,          //状态结束
1000                  //------------====== 状态 1 ======-------------
1001                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1002                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1003                  0xFF,          //状态结束
1004                  //------------====== 状态 2 ======-------------
1005                  0x00,0x63,0x64,0x0A,0x0A,0x00,          //底部温度范围
1006                  0x01,0x5F,0x04,          //底部温度大于指定温度跳转
1007                  0xFF,          //状态结束
1008                  //------------====== 状态 3 ======-------------
1009                  0x00,0x63,0x64,0xF0,0x05,0x00,          //底部温度范围
1010                  0x01,0x5F,0x04,          //底部温度大于指定温度跳转
1011                  0xFF,          //状态结束
1012                  //------------====== 状态 4 ======-------------
1013                  0x00,0x63,0x64,0xF3,0xF4,0x00,          //底部温度范围
1014                  0x02,0x5F,0x03,          //底部温度小于指定温度跳转
1015                  0xFF,          //状态结束
1016          };
1017          
1018          uint8   code    m_u8aTemp_110[] =
1019          {
1020                  0x05,0x0F,0x1A,0x24,0x2E,
1021                  //------------====== 状态 0 ======-------------
1022                  0x00,0x65,0x66,0xF0,0x05,0x00,          //底部温度范围
1023                  0x01,0x55,0x81,          //底部温度大于指定温度跳转
1024                  0xFF,          //状态结束
1025                  //------------====== 状态 1 ======-------------
1026                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1027                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1028                  0xFF,          //状态结束
1029                  //------------====== 状态 2 ======-------------
1030                  0x00,0x65,0x66,0x0A,0x0A,0x00,          //底部温度范围
1031                  0x01,0x61,0x04,          //底部温度大于指定温度跳转
1032                  0xFF,          //状态结束
1033                  //------------====== 状态 3 ======-------------
1034                  0x00,0x65,0x66,0xF0,0x05,0x00,          //底部温度范围
1035                  0x01,0x61,0x04,          //底部温度大于指定温度跳转
1036                  0xFF,          //状态结束
1037                  //------------====== 状态 4 ======-------------
1038                  0x00,0x65,0x66,0xF3,0xF4,0x00,          //底部温度范围
1039                  0x02,0x61,0x03,          //底部温度小于指定温度跳转
1040                  0xFF,          //状态结束
1041          };
1042          
1043          uint8   code    m_u8aTemp_115[] =
1044          {
1045              0x05,0x0F,0x1A,0x24,0x2E,
1046                  //------------====== 状态 0 ======-------------
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 18  

1047                  0x00,0x6A,0x6B,0xF0,0x05,0x00,          //底部温度范围
1048                  0x01,0x5A,0x81,          //底部温度大于指定温度跳转
1049                  0xFF,          //状态结束
1050                  //------------====== 状态 1 ======-------------
1051                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1052                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1053                  0xFF,          //状态结束
1054                  //------------====== 状态 2 ======-------------
1055                  0x00,0x6A,0x6B,0x0A,0x0A,0x00,          //底部温度范围
1056                  0x01,0x66,0x04,          //底部温度大于指定温度跳转
1057                  0xFF,          //状态结束
1058                  //------------====== 状态 3 ======-------------
1059                  0x00,0x6A,0x6B,0xF0,0x05,0x00,          //底部温度范围
1060                  0x01,0x66,0x04,          //底部温度大于指定温度跳转
1061                  0xFF,          //状态结束
1062                  //------------====== 状态 4 ======-------------
1063                  0x00,0x6A,0x6B,0xF3,0xF4,0x00,          //底部温度范围
1064                  0x02,0x66,0x03,          //底部温度小于指定温度跳转
1065                  0xFF,          //状态结束
1066          };
1067          
1068          uint8   code    m_u8aTemp_120[] =
1069          {
1070                  0x05,0x0F,0x1A,0x24,0x2E,
1071                  //------------====== 状态 0 ======-------------
1072                  0x00,0x6F,0x70,0xF0,0x05,0x00,          //底部温度范围
1073                  0x01,0x5A,0x81,          //底部温度大于指定温度跳转
1074                  0xFF,          //状态结束
1075                  //------------====== 状态 1 ======-------------
1076                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1077                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1078                  0xFF,          //状态结束
1079                  //------------====== 状态 2 ======-------------
1080                  0x00,0x6F,0x70,0x0A,0x0A,0x00,          //底部温度范围
1081                  0x01,0x6B,0x04,          //底部温度大于指定温度跳转
1082                  0xFF,          //状态结束
1083                  //------------====== 状态 3 ======-------------
1084                  0x00,0x6F,0x70,0xF0,0x05,0x00,          //底部温度范围
1085                  0x01,0x6B,0x04,          //底部温度大于指定温度跳转
1086                  0xFF,          //状态结束
1087                  //------------====== 状态 4 ======-------------
1088                  0x00,0x6F,0x70,0xF3,0xF4,0x00,          //底部温度范围
1089                  0x02,0x6B,0x03,          //底部温度小于指定温度跳转
1090                  0xFF,          //状态结束
1091          };
1092          
1093          uint8   code    m_u8aTemp_125[] =
1094          {
1095              0x05,0x0F,0x1A,0x24,0x2E,
1096                  //------------====== 状态 0 ======-------------
1097                  0x00,0x74,0x75,0xF0,0x05,0x00,          //底部温度范围
1098                  0x01,0x5F,0x81,          //底部温度大于指定温度跳转
1099                  0xFF,          //状态结束
1100                  //------------====== 状态 1 ======-------------
1101                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1102                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1103                  0xFF,          //状态结束
1104                  //------------====== 状态 2 ======-------------
1105                  0x00,0x74,0x75,0x0A,0x0A,0x00,          //底部温度范围
1106                  0x01,0x70,0x04,          //底部温度大于指定温度跳转
1107                  0xFF,          //状态结束
1108                  //------------====== 状态 3 ======-------------
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 19  

1109                  0x00,0x74,0x75,0xF0,0x05,0x00,          //底部温度范围
1110                  0x01,0x70,0x04,          //底部温度大于指定温度跳转
1111                  0xFF,          //状态结束
1112                  //------------====== 状态 4 ======-------------
1113                  0x00,0x74,0x75,0xF3,0xF4,0x00,          //底部温度范围
1114                  0x02,0x70,0x03,          //底部温度小于指定温度跳转
1115                  0xFF,          //状态结束
1116          };
1117          
1118          uint8   code    m_u8aTemp_130[] =
1119          {
1120              0x05,0x0F,0x1A,0x24,0x2E,
1121                  //------------====== 状态 0 ======-------------
1122                  0x00,0x79,0x7A,0xF0,0x05,0x00,          //底部温度范围
1123                  0x01,0x5F,0x81,          //底部温度大于指定温度跳转
1124                  0xFF,          //状态结束
1125                  //------------====== 状态 1 ======-------------
1126                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1127                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1128                  0xFF,          //状态结束
1129                  //------------====== 状态 2 ======-------------
1130                  0x00,0x79,0x7A,0x0A,0x0A,0x00,          //底部温度范围
1131                  0x01,0x75,0x04,          //底部温度大于指定温度跳转
1132                  0xFF,          //状态结束
1133                  //------------====== 状态 3 ======-------------
1134                  0x00,0x79,0x7A,0xF0,0x05,0x00,          //底部温度范围
1135                  0x01,0x75,0x04,          //底部温度大于指定温度跳转
1136                  0xFF,          //状态结束
1137                  //------------====== 状态 4 ======-------------
1138                  0x00,0x79,0x7A,0xF3,0xF4,0x00,          //底部温度范围
1139                  0x02,0x75,0x03,          //底部温度小于指定温度跳转
1140                  0xFF,          //状态结束
1141          };
1142          
1143          uint8   code    m_u8aTemp_135[] =
1144          {
1145              0x05,0x0F,0x1A,0x24,0x2E,
1146                  //------------====== 状态 0 ======-------------
1147                  0x00,0x7E,0x7F,0xF0,0x05,0x00,          //底部温度范围
1148                  0x01,0x64,0x81,          //底部温度大于指定温度跳转
1149                  0xFF,          //状态结束
1150                  //------------====== 状态 1 ======-------------
1151                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1152                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1153                  0xFF,          //状态结束
1154                  //------------====== 状态 2 ======-------------
1155                  0x00,0x7E,0x7F,0x0A,0x0A,0x00,          //底部温度范围
1156                  0x01,0x7A,0x04,          //底部温度大于指定温度跳转
1157                  0xFF,          //状态结束
1158                  //------------====== 状态 3 ======-------------
1159                  0x00,0x7E,0x7F,0xF0,0x05,0x00,          //底部温度范围
1160                  0x01,0x7A,0x04,          //底部温度大于指定温度跳转
1161                  0xFF,          //状态结束
1162                  //------------====== 状态 4 ======-------------
1163                  0x00,0x7E,0x7F,0xF3,0xF4,0x00,          //底部温度范围
1164                  0x02,0x7A,0x03,          //底部温度小于指定温度跳转
1165                  0xFF,          //状态结束
1166          };
1167          
1168          uint8   code    m_u8aTemp_140[] =
1169          {
1170              0x05,0x0F,0x1A,0x24,0x2E,
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 20  

1171                  //------------====== 状态 0 ======-------------
1172                  0x00,0x82,0x83,0xF0,0x05,0x00,          //底部温度范围
1173                  0x01,0x64,0x81,          //底部温度大于指定温度跳转
1174                  0xFF,          //状态结束
1175                  //------------====== 状态 1 ======-------------
1176                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1177                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1178                  0xFF,          //状态结束
1179                  //------------====== 状态 2 ======-------------
1180                  0x00,0x82,0x83,0x0A,0x0A,0x00,          //底部温度范围
1181                  0x01,0x7E,0x04,          //底部温度大于指定温度跳转
1182                  0xFF,          //状态结束
1183                  //------------====== 状态 3 ======-------------
1184                  0x00,0x82,0x83,0xF0,0x05,0x00,          //底部温度范围
1185                  0x01,0x7E,0x04,          //底部温度大于指定温度跳转
1186                  0xFF,          //状态结束
1187                  //------------====== 状态 4 ======-------------
1188                  0x00,0x82,0x83,0xF3,0xF4,0x00,          //底部温度范围
1189                  0x02,0x7E,0x03,          //底部温度小于指定温度跳转
1190                  0xFF,          //状态结束
1191          };
1192          
1193          uint8   code    m_u8aTemp_145[] =
1194          {
1195              0x05,0x0F,0x1A,0x24,0x2E,
1196                  //------------====== 状态 0 ======-------------
1197                  0x00,0x87,0x88,0xF0,0x05,0x00,          //底部温度范围
1198                  0x01,0x69,0x81,          //底部温度大于指定温度跳转
1199                  0xFF,          //状态结束
1200                  //------------====== 状态 1 ======-------------
1201                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1202                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1203                  0xFF,          //状态结束
1204                  //------------====== 状态 2 ======-------------
1205                  0x00,0x87,0x88,0x0A,0x0A,0x00,          //底部温度范围
1206                  0x01,0x83,0x04,          //底部温度大于指定温度跳转
1207                  0xFF,          //状态结束
1208                  //------------====== 状态 3 ======-------------
1209                  0x00,0x87,0x88,0xF0,0x05,0x00,          //底部温度范围
1210                  0x01,0x83,0x04,          //底部温度大于指定温度跳转
1211                  0xFF,          //状态结束
1212                  //------------====== 状态 4 ======-------------
1213                  0x00,0x87,0x88,0xF3,0xF4,0x00,          //底部温度范围
1214                  0x02,0x83,0x03,          //底部温度小于指定温度跳转
1215                  0xFF,          //状态结束
1216          };
1217          
1218          uint8   code    m_u8aTemp_150[] =
1219          {
1220              0x05,0x0F,0x1A,0x24,0x2E,
1221                  //------------====== 状态 0 ======-------------
1222                  0x00,0x8C,0x8D,0xF0,0x05,0x00,          //底部温度范围
1223                  0x01,0x6E,0x81,          //底部温度大于指定温度跳转
1224                  0xFF,          //状态结束
1225                  //------------====== 状态 1 ======-------------
1226                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1227                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1228                  0xFF,          //状态结束
1229                  //------------====== 状态 2 ======-------------
1230                  0x00,0x8C,0x8D,0x0A,0x0A,0x00,          //底部温度范围
1231                  0x01,0x88,0x04,          //底部温度大于指定温度跳转
1232                  0xFF,          //状态结束
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 21  

1233                  //------------====== 状态 3 ======-------------
1234                  0x00,0x8C,0x8D,0xF0,0x05,0x00,          //底部温度范围
1235                  0x01,0x88,0x04,          //底部温度大于指定温度跳转
1236                  0xFF,          //状态结束
1237                  //------------====== 状态 4 ======-------------
1238                  0x00,0x8C,0x8D,0xF3,0xF4,0x00,          //底部温度范围
1239                  0x02,0x88,0x03,          //底部温度小于指定温度跳转
1240                  0xFF,          //状态结束
1241          };
1242          
1243          uint8   code    m_u8aTemp_155[] =
1244          {
1245              0x05,0x0F,0x1A,0x24,0x2E,
1246                  //------------====== 状态 0 ======-------------
1247                  0x00,0x91,0x92,0xF0,0x05,0x00,          //底部温度范围
1248                  0x01,0x73,0x81,          //底部温度大于指定温度跳转
1249                  0xFF,          //状态结束
1250                  //------------====== 状态 1 ======-------------
1251                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1252                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1253                  0xFF,          //状态结束
1254                  //------------====== 状态 2 ======-------------
1255                  0x00,0x91,0x92,0x0A,0x0A,0x00,          //底部温度范围
1256                  0x01,0x8D,0x04,          //底部温度大于指定温度跳转
1257                  0xFF,          //状态结束
1258                  //------------====== 状态 3 ======-------------
1259                  0x00,0x91,0x92,0xF0,0x05,0x00,          //底部温度范围
1260                  0x01,0x8D,0x04,          //底部温度大于指定温度跳转
1261                  0xFF,          //状态结束
1262                  //------------====== 状态 4 ======-------------
1263                  0x00,0x91,0x92,0xF3,0xF4,0x00,          //底部温度范围
1264                  0x02,0x8D,0x03,          //底部温度小于指定温度跳转
1265                  0xFF,          //状态结束
1266          };
1267          
1268          uint8   code    m_u8aTemp_160[] =
1269          {
1270              0x05,0x0F,0x1A,0x24,0x2E,
1271                  //------------====== 状态 0 ======-------------
1272                  0x00,0x96,0x97,0xF0,0x05,0x00,          //底部温度范围
1273                  0x01,0x78,0x81,          //底部温度大于指定温度跳转
1274                  0xFF,          //状态结束
1275                  //------------====== 状态 1 ======-------------
1276                  0x00,0x2E,0x30,0x02,0x1C,0x00,          //底部温度范围
1277                  0x07,0x1E,0x00,0x02,          //烹饪时间大于指定秒钟跳转
1278                  0xFF,          //状态结束
1279                  //------------====== 状态 2 ======-------------
1280                  0x00,0x96,0x97,0x0A,0x0A,0x00,          //底部温度范围
1281                  0x01,0x92,0x04,          //底部温度大于指定温度跳转
1282                  0xFF,          //状态结束
1283                  //------------====== 状态 3 ======-------------
1284                  0x00,0x96,0x97,0xF0,0x05,0x00,          //底部温度范围
1285                  0x01,0x92,0x04,          //底部温度大于指定温度跳转
1286                  0xFF,          //状态结束
1287                  //------------====== 状态 4 ======-------------
1288                  0x00,0x96,0x97,0xF3,0xF4,0x00,          //底部温度范围
1289                  0x02,0x92,0x03,          //底部温度小于指定温度跳转
1290                  0xFF,          //状态结束
1291          };
1292          
1293          /*-----------------------------*
1294           *  static variable declaration*
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 22  

1295           *----------------------------*/
1296          
1297          
1298          
1299          #ifdef  DEBUG0
1300          /*-----------------------------------------------------------------------------*
1301           *  Function Description:                                                      *
1302           *      查询当前状态位置                                                                       *
1303           *  Parameters:                                                                *
1304           *      None                                                                   *
1305           *  Return                                                                     *
1306           *      m_u8ScriptStage                                                        *
1307           *----------------------------------------------------------------------------*/
1308          uint8   GetScriptStage(void)
1309          {
1310   1              return  m_u8ScriptStage;
1311   1      }
1312          #endif
1313          
1314          /*-----------------------------------------------------------------------------*
1315           *  Function Description:                                                      *
1316           *      复位当前Script参数                                                                 *
1317           *  Parameters:                                                                *
1318           *      None                                                                   *
1319           *  Return                                                                     *
1320           *      None                                                                   *
1321           *----------------------------------------------------------------------------*/
1322          void    ResetCurScript(void)
1323          {  
1324   1           m_u8ScriptStage    =       0;
1325   1           m_u8pScript                =       NULL;
1326   1           bCookBySctEN               =       0;                      //禁止Script运行
1327   1               bBoilChk_EN            =       0;                      //取消沸腾判断
1328   1      //       bStageChgReq       =   0;
1329   1      //       bStageChgOK        =   0;
1330   1               bBoilReach                     =       0;
1331   1      //       u8BoilChkCnt           =       0;
1332   1      //       m_u8BoilChkTime        =       0;
1333   1      //       m_u8BoilDegree         =       0;
1334   1           m_u16CookTime              =       0;
1335   1               m_u16IntCookTime       =       0;
1336   1               g_u16RelayTime         =       0;
1337   1               m_u8AddOnParam         =       0;                      //临时参数清零
1338   1               m_u8AddOffParam        =       0;
1339   1           bTempAch1st        =   0;
1340   1           bTimeCountDown     =   0;
1341   1               m_u8ChkCnt         =   0;
1342   1      }
1343          
1344          /*-----------------------------------------------------------------------------*
1345           *  Function Description:                                                      *
1346           *      设置功能地址                                                                       *
1347           *  Parameters:                                                                *
1348           *      None                                                                   *
1349           *  Return                                                                     *
1350           *      None                                                                   *
1351           *----------------------------------------------------------------------------*/
1352          void    SetCurScript(uint8 u8ID,uint8 u8texture)
1353          {
1354   1              switch(u8ID)
1355   1              {
1356   2              //Nutritious menus(01-09)
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 23  

1357   2                      case    FUNC_ID_WHITERICE:      
1358   2                  if((u8texture==TEXTURE_ID_NUTRITIOUS)||(u8texture==TEXTURE_ID_SOFT))
1359   2                  {
1360   3                      m_u8pBaseScript = (uint8 code *)m_u8aWhiteRice_Nutritious_Soft;
1361   3                  }
1362   2                  if((u8texture==TEXTURE_ID_HARD)||(u8texture==TEXTURE_ID_NORMAL))
1363   2                  {
1364   3                      m_u8pBaseScript = (uint8 code *)m_u8aWhiteRice_Hard_Normal;
1365   3                  }
1366   2                  break;
1367   2                      case    FUNC_ID_BROWNRICE:           
1368   2                  if(u8texture==TEXTURE_ID_NUTRITIOUS) m_u8pBaseScript = (uint8 code *)m_u8aBrownRice_Nutritious
             -;
1369   2                  if(u8texture==TEXTURE_ID_HARD) m_u8pBaseScript = (uint8 code *)m_u8aBrownRice_Hard;
1370   2                  if((u8texture==TEXTURE_ID_NORMAL)||(u8texture==TEXTURE_ID_SOFT))
1371   2                  {
1372   3                      m_u8pBaseScript = (uint8 code *)m_u8aBrownRice_Normal_Soft;
1373   3                  }
1374   2                  break;
1375   2              case    FUNC_ID_BUCKWHEAT:
1376   2                  if((u8texture==TEXTURE_ID_NUTRITIOUS)||(u8texture==TEXTURE_ID_SOFT))
1377   2                  {
1378   3                      m_u8pBaseScript = (uint8 code *)m_u8aBuckWheat_Nutritious_Soft;
1379   3                  }
1380   2                  if(u8texture==TEXTURE_ID_HARD) m_u8pBaseScript = (uint8 code *)m_u8aBuckWheat_Hard;
1381   2                  break;
1382   2                      case    FUNC_ID_QUINOA:
1383   2                  if(u8texture==TEXTURE_ID_NUTRITIOUS) m_u8pBaseScript = (uint8 code *)m_u8aQuinoa_Nutritious; 
1384   2                  if((u8texture==TEXTURE_ID_HARD)||(u8texture==TEXTURE_ID_NORMAL))
1385   2                  {
1386   3                      m_u8pBaseScript = (uint8 code *)m_u8aQuinoa_Hard_Normal;
1387   3                  }
1388   2                  break;
1389   2                      case    FUNC_ID_LENTILS:
1390   2                              if((u8texture==TEXTURE_ID_NUTRITIOUS)||(u8texture==TEXTURE_ID_HARD))
1391   2                              {
1392   3                                      m_u8pBaseScript = (uint8 code *)m_u8aLentils_Nutritious_Hard;
1393   3                              }
1394   2                              if(u8texture==TEXTURE_ID_SOFT) m_u8pBaseScript = (uint8 code *)m_u8aLentils_Soft;
1395   2                  break;
1396   2                      case    FUNC_ID_BEANS:
1397   2                  if(bStageChgReq==0)
1398   2                  {
1399   3                      m_u8pBaseScript =  (uint8 code *)m_u8aBeans_Nutritious_Normal_stage1;
1400   3                  }
1401   2                  else
1402   2                  {
1403   3                                      if(u8texture==TEXTURE_ID_NUTRITIOUS) m_u8pBaseScript = (uint8 code *)m_u8aBeans_Nutritious_stage2;
1404   3                      if(u8texture==TEXTURE_ID_NORMAL)     m_u8pBaseScript = (uint8 code *)m_u8aBeans_Normal_sta
             -ge2;
1405   3                  }
1406   2                  break;              
1407   2                      case    FUNC_ID_BABYPORRIDGE:
1408   2                               m_u8pBaseScript = (uint8 code *)m_u8aBabyPorridge;
1409   2                              break;
1410   2      //        case    FUNC_ID_BEANS_BROWNRICE:
1411   2      //            if(bStageChgReq==0)
1412   2      //            {
1413   2      //                m_u8pBaseScript =  (uint8 code *)m_u8aBeans_BrownRice_stage1;
1414   2      //            }
1415   2      //            else
1416   2      //            {
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 24  

1417   2      //                m_u8pBaseScript       =  (uint8 code *)m_u8aBeans_BrownRice_stage2;
1418   2      //            }
1419   2      //            break;
1420   2              case    FUNC_ID_BROWNRICE_LENTILS:
1421   2                  m_u8pBaseScript     =       (uint8 code     *)m_u8aBrownRice_Lentiles; 
1422   2                  break;
1423   2              case    FUNC_ID_CHICKPEAS:
1424   2                  if(bStageChgReq==0)
1425   2                  {
1426   3                      m_u8pBaseScript =  (uint8 code *)m_u8aChickPeas_stage1;
1427   3                  }
1428   2                  else
1429   2                  {
1430   3                      m_u8pBaseScript =  (uint8 code *)m_u8aChickPeas_stage2;
1431   3                  }
1432   2                  break; 
1433   2                  
1434   2              //Classical menus(10-21)
1435   2              case    FUNC_ID_RISOTTO:
1436   2                  m_u8pBaseScript =  (uint8 code *)m_u8aRisotto;
1437   2                  break;;
1438   2              case    FUNC_ID_STEAM:
1439   2                  m_u8pBaseScript     =       (uint8 code *)m_u8aSteam;
1440   2                              break;  
1441   2              case    FUNC_ID_SLOWCOOK:
1442   2                  if(u8CookTemp==80)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_80;
1443   2                              if(u8CookTemp==90)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_90;
1444   2                              if(u8CookTemp==100) m_u8pBaseScript = (uint8 code *)m_u8aSlowcook;
1445   2                              break;
1446   2              case    FUNC_ID_BAKING:
1447   2                      case    FUNC_ID_BROWNING:
1448   2                      case    FUNC_ID_DESSERT:
1449   2                      case    FUNC_ID_DIY:
1450   2                              if(u8CookTemp==40)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_40;
1451   2                  if(u8CookTemp==45)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_45;
1452   2                              if(u8CookTemp==50)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_50;
1453   2                  if(u8CookTemp==55)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_55;
1454   2                              if(u8CookTemp==60)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_60;
1455   2                  if(u8CookTemp==65)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_65;
1456   2                              if(u8CookTemp==70)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_70;
1457   2                  if(u8CookTemp==75)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_75;
1458   2                              if(u8CookTemp==80)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_80;
1459   2                  if(u8CookTemp==85)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_85;
1460   2                              if(u8CookTemp==90)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_90;
1461   2                  if(u8CookTemp==95)  m_u8pBaseScript = (uint8 code *)m_u8aTemp_95;
1462   2                              if(u8CookTemp==100)
1463   2                              {       
1464   3                                      if((u8ID==FUNC_ID_BAKING)||(u8ID==FUNC_ID_BROWNING))
1465   3                                      {
1466   4                                              m_u8pBaseScript = (uint8 code *)m_u8aTemp_Oil_100;      
1467   4                                      }
1468   3                                      else
1469   3                                      {
1470   4                                              m_u8pBaseScript = (uint8 code *)m_u8aTemp_Water_100;
1471   4                                      }
1472   3                              }
1473   2                  if(u8CookTemp==105) m_u8pBaseScript = (uint8 code *)m_u8aTemp_105;
1474   2                              if(u8CookTemp==110) m_u8pBaseScript = (uint8 code *)m_u8aTemp_110;      
1475   2                  if(u8CookTemp==115) m_u8pBaseScript = (uint8 code *)m_u8aTemp_115;
1476   2                              if(u8CookTemp==120) m_u8pBaseScript = (uint8 code *)m_u8aTemp_120;      
1477   2                  if(u8CookTemp==125) m_u8pBaseScript = (uint8 code *)m_u8aTemp_125;  
1478   2                              if(u8CookTemp==130) m_u8pBaseScript = (uint8 code *)m_u8aTemp_130;      
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 25  

1479   2                  if(u8CookTemp==135) m_u8pBaseScript = (uint8 code *)m_u8aTemp_135;
1480   2                          if(u8CookTemp==140) m_u8pBaseScript = (uint8 code *)m_u8aTemp_140;  
1481   2                  if(u8CookTemp==145) m_u8pBaseScript = (uint8 code *)m_u8aTemp_145;
1482   2                              if(u8CookTemp==150) m_u8pBaseScript = (uint8 code *)m_u8aTemp_150;
1483   2                  if(u8CookTemp==155) m_u8pBaseScript = (uint8 code *)m_u8aTemp_155;
1484   2                          if(u8CookTemp==160) m_u8pBaseScript = (uint8 code *)m_u8aTemp_160;
1485   2                          break;
1486   2              case    FUNC_ID_SOUP:
1487   2                  m_u8pBaseScript     =       (uint8 code     *)m_u8aSoup; 
1488   2                  break;
1489   2              case    FUNC_ID_PASTA:
1490   2                  m_u8pBaseScript = (uint8 code *)m_u8aPasta;     
1491   2                  break;
1492   2              case    FUNC_ID_BREADRISING:
1493   2                  if(u8CookTemp==30) m_u8pBaseScript = (uint8 code *)m_u8aTemp_30;
1494   2                  if(u8CookTemp==40) m_u8pBaseScript = (uint8 code *)m_u8aTemp_40;
1495   2                  break;
1496   2              case    FUNC_ID_CREAMCHEESE:
1497   2                  m_u8pBaseScript = (uint8 code *)m_u8aCreamcheese;  
1498   2                  break;
1499   2              case    FUNC_ID_YOGURT: 
1500   2                  m_u8pBaseScript = (uint8 code *)m_u8aYoghurt;   
1501   2                  break;
1502   2              case    FUNC_ID_JAM:
1503   2                  m_u8pBaseScript = (uint8 code *)m_u8aJam;  
1504   2                  break;
1505   2              case    FUNC_ID_REHEAT:
1506   2                  if(u8CookTemp==80) m_u8pBaseScript = (uint8 code *)m_u8aReheat_80;
1507   2                  if(u8CookTemp==100) m_u8pBaseScript = (uint8 code *)m_u8aReheat_100;                
1508   2                              break;  
1509   2                      default:
1510   2                              break;
1511   2              }       
1512   1              ResetCurScript();       
1513   1      }
1514          
1515          /*-----------------------------------------------------------------------------*
1516           *  Function Description:                                                      *
1517           *      烹饪处理进程                                                                       *
1518           *  Parameters:                                                                *
1519           *      None                                                                   *
1520           *  Return                                                                     *
1521           *      None                                                                   *
1522           *----------------------------------------------------------------------------*/
1523          void    ScriptProc(void)
1524          {
1525   1              uint8   u8Tmp;
1526   1      
1527   1              if(g_u8ErrorType)       return;                         //如果系统处于报警状态，不执行Script
1528   1      
1529   1              if(bCookBySctEN)                                                        //如果Script有效，执行Script
1530   1              {
1531   2                      if(m_u8pScript==NULL)
1532   2                      {
1533   3                              m_u8pScript     =       m_u8pBaseScript+m_u8pBaseScript[m_u8ScriptStage];
1534   3                      }
1535   2      
1536   2                      if(bSys_1000MS) m_u16CookTime++;
1537   2      
1538   2                      while(m_u8pScript!=NULL)
1539   2                      {
1540   3                              switch(m_u8pScript[0])
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 26  

1541   3                              {
1542   4                                      //=========================================
1543   4                                      //底部温度指令,格式:00,LoTmp,HiTmp,OnTime,OffTime,bBoilChk_EN
1544   4                                      case    0x00:
1545   4                                                      SetBotTemp(m_u8pScript);        //设置底部温度
1546   4                                                      m_u8pScript     +=      6;
1547   4                                                      break;
1548   4      
1549   4                                      //=========================================
1550   4                                      //温度跳转指令,格式:1/2/3/4,Temp,JmpStage
1551   4                                      case    0x01:
1552   4                                      case    0x02:
1553   4                                      case    0x03:
1554   4                                      case    0x04:
1555   4                                                      u8Tmp   =       ByTemp_ChgStage(m_u8pScript);
1556   4                                                      m_u8pScript     +=      3;
1557   4                                                      ChangeScriptStage(u8Tmp);
1558   4                                                      break;
1559   4      
1560   4                                      //=========================================
1561   4                                      //时间跳转指令,格式：5/6/7/8/9,TimeLo,TimeHi,JmpStage
1562   4                                      case    0x05:
1563   4                                      case    0x06:
1564   4                                      case    0x07:
1565   4                                      case    0x08:
1566   4                                      case    0x09:
1567   4                                                      u8Tmp   =       ByTime_ChgStage(m_u8pScript);
1568   4                                                      m_u8pScript     +=      4;
1569   4                                                      ChangeScriptStage(u8Tmp);
1570   4                                                      break;
1571   4      
1572   4                                      //=========================================
1573   4                                      //加热功率参数,格式：0x0a/0x0b,PowerLevel
1574   4                                      //case  0x0a:                                   //最大加热功率
1575   4                                      //case  0x0b:                                   //最小加热功率
1576   4                                      //              SetPowerLevel(m_u8pScript);
1577   4                                      //              m_u8pScript     +=      2;
1578   4                                      //              break;
1579   4      
1580   4                                      //=========================================
1581   4                                      //顶部和侧面加热指令,格式：0x0c/0x0d,u8JmpMode,Temp
1582   4                                      case    0x0c:                   //顶部加热控制
1583   4                                      case    0x0d:                   //侧部加热控制                  
1584   4                                                      Heat_Ctr(m_u8pScript);
1585   4                                                      m_u8pScript     +=      3;
1586   4                                                      break;
1587   4      
1588   4                                      //=========================================
1589   4                                      //特别指令，目前包括进入保温
1590   4                                      case    0x0e:
1591   4                                                      u8Tmp = OtherCmds(m_u8pScript);
1592   4                                                      if(m_u8pScript==NULL)   break;    //保温直接跳出
1593   4                                                      else    m_u8pScript     +=      5;
1594   4                                                      ChangeScriptStage(u8Tmp);
1595   4                                                      break;
1596   4      
1597   4                                      case    0xff:
1598   4                                                      m_u8pScript     =       NULL;
1599   4                                                      break;
1600   4      
1601   4                                      default:
1602   4                                                      EnterReset();                   //脚本出错复位
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 27  

1603   4                                                      break;
1604   4                              }
1605   3                      }
1606   2              }
1607   1      }
1608          
1609          /*-----------------------------------------------------------------------------*
1610           *  Function Description:                                                      *
1611           *      当前状态转换                                                                       *
1612           *  Parameters:                                                                *
1613           *      u8Stage需要跳转的状态                                                  *
1614           *  Return                                                                     *
1615           *      None                                                                   *
1616           *----------------------------------------------------------------------------*/
1617          void    ChangeScriptStage(uint8 u8Stage)
1618          {
1619   1              if(u8Stage==0xff)       return;
1620   1              m_u8ScriptStage =       u8Stage&0x7f;
1621   1              if(u8Stage&0x80)        m_u16CookTime   =       0;
1622   1      }
1623          
1624          /*-----------------------------------------------------------------------------*
1625           *  Function Description:                                                      *
1626           *      设置底部温度范围                                                                       *
1627           *  Parameters:                                                                *
1628           *      pScript，脚本数据                                                      *
1629           *  Return                                                                     *
1630           *      None                                                                   *
1631           *----------------------------------------------------------------------------*/
1632          void    SetBotTemp(uint8 code *pScript)
1633          {
1634   1          uint8 u8BotDegree = ADCGetData(AD_CH_BOT);
1635   1              g_u8LoTemp      =       pScript[1];
1636   1              g_u8HiTemp      =       pScript[2];
1637   1              g_u8OnTime_Set  =       pScript[3];
1638   1              g_u8OffTime_Set =       pScript[4];
1639   1              
1640   1              if(pScript[5]==0x0A)    bBoilChk_EN     =       1;      //使能沸腾检测
1641   1              else    bBoilChk_EN     =       0;                                      //禁止沸腾检测
1642   1              
1643   1              /*-----------------可调温度区间设计---------------------*/
1644   1              
1645   1              if((g_u8LoTemp==0xf1)&&(g_u8HiTemp==0xf1))  //吸水维持温度S1 
1646   1              {
1647   2                  g_u8LoTemp = g_u16VarParam[SOAK_TEMP_KEEP_S1];
1648   2                      g_u8HiTemp = g_u16VarParam[SOAK_TEMP_KEEP_S1]+1;
1649   2              }
1650   1              if((g_u8LoTemp==0xf2)&&(g_u8HiTemp==0xf2))  //吸水维持温度S2(Brownrice_Nutritious)
1651   1          {
1652   2              g_u8LoTemp = g_u16VarParam[SOAK_TEMP_KEEP_S2];
1653   2                      g_u8HiTemp = g_u16VarParam[SOAK_TEMP_KEEP_S2]+1;
1654   2          }
1655   1          
1656   1              /*-----------------可调加热功率设置--------------------*/
1657   1              if(g_u8OnTime_Set>0xf0)
1658   1              {
1659   2                      if(g_u8OnTime_Set==0xf1)                //饭&&粥&&稀饭&&汤
1660   2                      {
1661   3                              g_u8OnTime_Set  =       m_u8AddOnParam;         
1662   3                      }       
1663   2                      
1664   2                      if(g_u8OnTime_Set==0xf2)                //粥&&稀饭&&汤
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 28  

1665   2                      {
1666   3                              g_u8OnTime_Set  =       m_u8AddOnParam/2;       
1667   3                              if(g_u8OnTime_Set<8) g_u8OnTime_Set = 8;   //最小功率限制
1668   3                      }       
1669   2              
1670   2              if(g_u8OnTime_Set==0xf3)                //Fry
1671   2                      {
1672   3                              if(u8CookTemp==160)
1673   3                              {
1674   4                                      if(u8BotDegree<151)
1675   4                                      {
1676   5                                              g_u8OnTime_Set = 163-u8BotDegree;
1677   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1678   5                                      }
1679   4                                      else
1680   4                                      {
1681   5                                              g_u8OnTime_Set = 0;
1682   5                                      }
1683   4                              }         
1684   3      
1685   3                  if(u8CookTemp==155)
1686   3                              {
1687   4                                      if(u8BotDegree<146)
1688   4                                      {
1689   5                                              g_u8OnTime_Set = 158-u8BotDegree;
1690   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1691   5                                      }
1692   4                                      else
1693   4                                      {
1694   5                                              g_u8OnTime_Set = 0;
1695   5                                      }
1696   4                              } 
1697   3                              
1698   3                              if(u8CookTemp==150)
1699   3                              {
1700   4                                      if(u8BotDegree<141)
1701   4                                      {
1702   5                                              g_u8OnTime_Set = 153-u8BotDegree;
1703   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1704   5                                      }
1705   4                                      else
1706   4                                      {
1707   5                                              g_u8OnTime_Set = 0;
1708   5                                      }
1709   4                              }
1710   3      
1711   3                  if(u8CookTemp==145)
1712   3                              {
1713   4                                      if(u8BotDegree<136)
1714   4                                      {
1715   5                                              g_u8OnTime_Set = 148-u8BotDegree;
1716   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1717   5                                      }
1718   4                                      else
1719   4                                      {
1720   5                                              g_u8OnTime_Set = 0;
1721   5                                      }
1722   4                              }
1723   3                              
1724   3                              if(u8CookTemp==140)
1725   3                              {
1726   4                                      if(u8BotDegree<131)
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 29  

1727   4                                      {
1728   5                                              g_u8OnTime_Set = 143-u8BotDegree;
1729   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1730   5                                      }
1731   4                                      else
1732   4                                      {
1733   5                                              g_u8OnTime_Set = 0;
1734   5                                      }
1735   4                              }
1736   3      
1737   3                  if(u8CookTemp==135)
1738   3                              {
1739   4                                      if(u8BotDegree<127)
1740   4                                      {
1741   5                                              g_u8OnTime_Set = 139-u8BotDegree;
1742   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1743   5                                      }
1744   4                                      else
1745   4                                      {
1746   5                                              g_u8OnTime_Set = 0;
1747   5                                      }
1748   4                              }
1749   3                              
1750   3                              if(u8CookTemp==130)
1751   3                              {
1752   4                                      if(u8BotDegree<122)
1753   4                                      {
1754   5                                              g_u8OnTime_Set = 134-u8BotDegree;
1755   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1756   5                                      }
1757   4                                      else
1758   4                                      {
1759   5                                              g_u8OnTime_Set = 0;
1760   5                                      }
1761   4                              }
1762   3      
1763   3                  if(u8CookTemp==125)
1764   3                              {
1765   4                                      if(u8BotDegree<117)
1766   4                                      {
1767   5                                              g_u8OnTime_Set = 129-u8BotDegree;
1768   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1769   5                                      }
1770   4                                      else
1771   4                                      {
1772   5                                              g_u8OnTime_Set = 0;
1773   5                                      }
1774   4                              }
1775   3                              
1776   3                              if(u8CookTemp==120)
1777   3                              {
1778   4                                      if(u8BotDegree<112)
1779   4                                      {
1780   5                                              g_u8OnTime_Set = 124-u8BotDegree;
1781   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1782   5                                      }
1783   4                                      else
1784   4                                      {
1785   5                                              g_u8OnTime_Set = 0;
1786   5                                      }
1787   4                              }
1788   3         
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 30  

1789   3                  if(u8CookTemp==115)
1790   3                              {
1791   4                                      if(u8BotDegree<107)
1792   4                                      {
1793   5                                              g_u8OnTime_Set = 119-u8BotDegree;
1794   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1795   5                                      }
1796   4                                      else
1797   4                                      {
1798   5                                              g_u8OnTime_Set = 0;
1799   5                                      }
1800   4                              }
1801   3                              
1802   3                              if(u8CookTemp==110)
1803   3                              {
1804   4                                      if(u8BotDegree<102)
1805   4                                      {
1806   5                                              g_u8OnTime_Set = 114-u8BotDegree;
1807   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1808   5                                      }
1809   4                                      else
1810   4                                      {
1811   5                                              g_u8OnTime_Set = 0;
1812   5                                      }
1813   4                              }
1814   3      
1815   3                  if(u8CookTemp==105)
1816   3                              {
1817   4                                      if(u8BotDegree<100)
1818   4                                      {
1819   5                                              g_u8OnTime_Set = 112-u8BotDegree;
1820   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1821   5                                      }
1822   4                                      else
1823   4                                      {
1824   5                                              g_u8OnTime_Set = 0;
1825   5                                      }
1826   4                              }
1827   3                  
1828   3                              if(u8CookTemp==100)
1829   3                              {
1830   4                                      if(u8BotDegree<98)
1831   4                                      {
1832   5                                              g_u8OnTime_Set = 110-u8BotDegree;
1833   5                                              if(g_u8OnTime_Set>20) g_u8OnTime_Set = 20; 
1834   5                                      }
1835   4                                      else
1836   4                                      {
1837   5                                              g_u8OnTime_Set = 0;
1838   5                                      }
1839   4                              }               
1840   3                      }
1841   2              }
1842   1      
1843   1              if(g_u8OffTime_Set>0xf0)
1844   1              {
1845   2                      if(g_u8OffTime_Set==0xf1)               //饭&&粥&&稀饭&&汤
1846   2                      {
1847   3                              g_u8OffTime_Set =       m_u8AddOffParam;
1848   3                              if(g_u8OffTime_Set==0)
1849   3                              {
1850   4                                      g_u8OnTime_Set = 0xf0;  //连续加热
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 31  

1851   4                              }
1852   3                      }
1853   2                      
1854   2                      if(g_u8OffTime_Set==0xf2)               //粥&&稀饭&&汤(80->90)
1855   2                      {
1856   3                              g_u8OffTime_Set = 35;           
1857   3                      }
1858   2                      
1859   2      //              if(g_u8OffTime_Set==0xf3)               //粥&&稀饭&&汤(90->100)
1860   2      //              {
1861   2      //                      //-----------------粥--------------------
1862   2      //                      if(m_u8CookMode==4)
1863   2      //                      {       
1864   2      //                              if(m_u8AddOnParam>=18)
1865   2      //                              {
1866   2      //                                  g_u8OffTime_Set     = 55+m_u8AddOffParam;
1867   2      //                              }
1868   2      //                              else
1869   2      //                              {
1870   2      //                                  g_u8OffTime_Set = 48+m_u8AddOffParam;
1871   2      //                              }
1872   2      //                              
1873   2      //                              if(m_u8AddOnParam>=22)
1874   2      //                              {
1875   2      //                                      g_u8OffTime_Set +=5;
1876   2      //                              }
1877   2      //                      }
1878   2      //                      
1879   2      //                      //-----------------稀饭------------------
1880   2      //                      if(m_u8CookMode==5)
1881   2      //                      {
1882   2      //                              g_u8OffTime_Set = 60+m_u8AddOffParam;
1883   2      //                      }
1884   2      //                      
1885   2      //                      //-----------------汤--------------------
1886   2      //                      if(m_u8CookMode==7)
1887   2      //                      {
1888   2      //                              g_u8OffTime_Set = 38+m_u8AddOffParam;
1889   2      //                      }
1890   2      //              }
1891   2              
1892   2              if(g_u8OffTime_Set==0xf4)               //Fry
1893   2                      {
1894   3                              g_u8OffTime_Set = 30 - g_u8OnTime_Set;
1895   3                      }
1896   2              }
1897   1      }
1898          
1899          /*-----------------------------------------------------------------------------*
1900           *  Function Description:                                                      *
1901           *      温度跳转处理                                                                       *
1902           *  Parameters:                                                                *
1903           *      pScript，脚本数据                                                      *
1904           *  Return                                                                     *
1905           *      跳转的状态,0xff不跳转,其他值跳转                                       *
1906           *----------------------------------------------------------------------------*/
1907          uint8   ByTemp_ChgStage(uint8 code *pScript)
1908          {
1909   1              uint8   i       =       pScript[1];                                     //跳转温度值
1910   1              uint8   u8ChReq =       0;                              //跳转标志位
1911   1              uint8   u8BotDegree     =       ADCGetData(AD_CH_BOT);
1912   1              uint8   u8TopDegree     =       ADCGetData(AD_CH_TOP);
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 32  

1913   1      
1914   1      
1915   1              switch(pScript[0])
1916   1              {
1917   2                      case    1:      
1918   2                                      if(u8BotDegree > i)
1919   2                                      {
1920   3                                              u8ChReq =       1;
1921   3                                      }
1922   2                                      break;
1923   2                      case    2:
1924   2                                      if(u8BotDegree < i)
1925   2                                      {
1926   3                                              u8ChReq =       1;
1927   3                                      }
1928   2                                      break;
1929   2                      case    3:
1930   2                                      if(u8TopDegree > i)
1931   2                                      {
1932   3                                              u8ChReq =       1;
1933   3                                      }
1934   2                                      if(bBoilChk_EN&&bBoilReach)     //沸腾判断&&已沸腾
1935   2                                      {
1936   3                                              u8ChReq =       1;
1937   3                                      }
1938   2                                      break;
1939   2                      case    4:
1940   2                                      if(u8TopDegree < i)
1941   2                                      {
1942   3                                              u8ChReq =       1;
1943   3                                      }
1944   2                                      break;
1945   2                      default:
1946   2                                      break;
1947   2              }
1948   1      
1949   1              if(u8ChReq)
1950   1              {
1951   2                      return  pScript[2];
1952   2              }
1953   1              return  0xff;
1954   1      }
1955          
1956          /*-----------------------------------------------------------------------------*
1957           *  Function Description:                                                      *
1958           *      时间跳转处理                                                                       *
1959           *  Parameters:                                                                *
1960           *      pScript，脚本数据                                                      *
1961           *  Return                                                                     *
1962           *      跳转的状态,0xff不跳转,其他值跳转                                       *
1963           *----------------------------------------------------------------------------*/
1964          uint8   ByTime_ChgStage(uint8 code      *pScript)
1965          {
1966   1              uint16  u16Time =       pScript[1]+pScript[2]*256;              //指定的时间条件(分钟)
1967   1      
1968   1              if(pScript[0]==9)                                                                       //烹饪时间清零
1969   1              {
1970   2                      m_u16CookTime   =       0;
1971   2                      return  0xff;
1972   2              }
1973   1      
1974   1              //========================================================
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 33  

1975   1              //5和6为分钟跳转,5为大于指定分钟跳转，6为小于指定分钟跳转
1976   1              //7和8为秒的跳转,7为大于指定秒跳转，8为小于指定秒跳转
1977   1      
1978   1              if(pScript[0]==5||pScript[0]==6)
1979   1              {
1980   2                      if(u16Time > 0xf0)
1981   2                      {                                       
1982   3                              if(u16Time==0xf1)                                                       //吸水升温时间S1
1983   3                              {                                       
1984   4                      u16Time = g_u16VarParam[SOAK_TIME_RISE_S1];
1985   4                              }
1986   3                  if(u16Time==0xf2)                           //吸水维持时间S1
1987   3                  {
1988   4                      u16Time = g_u16VarParam[SOAK_TIME_KEEP_S1];
1989   4                  }
1990   3                  if(u16Time==0xf3)                           //吸水升温时间S2(Brownrice_Nutritious)
1991   3                  {
1992   4                      u16Time = g_u16VarParam[SOAK_TIME_RISE_S2];
1993   4                  }
1994   3                  if(u16Time==0xf4)                           //吸水维持时间S2(Brownrice_Nutritious)
1995   3                  {
1996   4                      u16Time = g_u16VarParam[SOAK_TIME_KEEP_S2];
1997   4                  }
1998   3                  if(u16Time==0xf5)                           //糊化时间
1999   3                  {
2000   4                      u16Time = g_u16VarParam[MASH_TIME];
2001   4                  }
2002   3                      }
2003   2                      else
2004   2                      {
2005   3                          u16Time     *=      60;
2006   3                      }
2007   2              }
2008   1      
2009   1              if(pScript[0]==5||pScript[0]==7)
2010   1              {
2011   2                      if(m_u16CookTime > u16Time)
2012   2                      {
2013   3                              return  pScript[3];
2014   3                      }
2015   2              }
2016   1              else
2017   1              {
2018   2                      if(m_u16CookTime < u16Time)
2019   2                      {
2020   3                              return  pScript[3];
2021   3                      }
2022   2              }
2023   1              return  0xff;
2024   1      }
2025          
2026          /*-----------------------------------------------------------------------------*
2027           *  Function Description:                                                      *
2028           *      设置功率等级                                                                       *
2029           *  Parameters:                                                                *
2030           *      pScript，脚本数据                                                      *
2031           *  Return                                                                     *
2032           *      None                                                                   *
2033           *----------------------------------------------------------------------------*/
2034          //void  SetPowerLevel(uint8     code *pScript)
2035          //{
2036          //      switch(pScript[0])
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 34  

2037          //      {
2038          //              case    0x0a:                                                           //设定最大加热功率
2039          //                              _nop_();
2040          //                              break;
2041          //              case    0x0b:                                                           //设定最小加热功率 
2042          //                              _nop_();
2043          //                              break;
2044          //              default:
2045          //                              break;
2046          //      }
2047          //}
2048          
2049          /*-----------------------------------------------------------------------------*
2050           *  Function Description:                                                      *
2051           *      顶侧加热处理                                                                       *
2052           *  Parameters:                                                                *
2053           *      pScript，脚本数据                                                      *
2054           *  Return                                                                     *
2055           *      None                                                                   *
2056           *----------------------------------------------------------------------------*/
2057          void    Heat_Ctr(uint8 code     *pScript)
2058          {
2059   1              uint8   u8ChReq =       0;                                                      //开断标志位
2060   1              uint8   u8BotDegree     =       ADCGetData(AD_CH_BOT);
2061   1              uint8   u8TopDegree     =       ADCGetData(AD_CH_TOP);
2062   1      
2063   1              if(pScript[2]!=0)                                                               //Temp
2064   1              {
2065   2                      switch(pScript[1])
2066   2                      {
2067   3                              case    1:
2068   3                                              if(u8TopDegree < pScript[2])
2069   3                                              {
2070   4                                                      u8ChReq =       1;                              //开
2071   4                                              }
2072   3                                              break;
2073   3                              case    2:
2074   3                                              if(u8TopDegree > pScript[2])
2075   3                                              {
2076   4                                                      u8ChReq =       2;                      //断
2077   4                                              }
2078   3                                              break;
2079   3                              case    5:
2080   3                                              if(u8BotDegree < pScript[2])
2081   3                                              {
2082   4                                                      u8ChReq =       1;                              //开
2083   4                                              }
2084   3                                              break;
2085   3                              case    6:
2086   3                                              if(u8BotDegree > pScript[2])
2087   3                                              {
2088   4                                                      u8ChReq =       2;                      //断
2089   4                                              }
2090   3                                              break;
2091   3                              default:
2092   3                                              u8ChReq =       0;
2093   3                                              break;
2094   3                      }
2095   2              }
2096   1              else
2097   1              {
2098   2                      //直接输入或输出
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 35  

2099   2                      if(pScript[1]==1)
2100   2                      {
2101   3                              u8ChReq =       1;                                                      //开
2102   3                      }
2103   2                      else
2104   2                      {
2105   3                              u8ChReq =       2;                                              //断
2106   3                      }
2107   2              }
2108   1      
2109   1              if(u8ChReq==1)
2110   1              {
2111   2                      if(pScript[0]==0x0c)
2112   2                      {
2113   3                              bHeatTopReq     =       1;                                              //打开顶部加热
2114   3                      }
2115   2                      else    //pScript[0]==0x0d
2116   2                      {
2117   3                              bHeatArdReq     =       1;                                              //打开侧部加热
2118   3                      }
2119   2              }
2120   1              
2121   1              if(u8ChReq==2)
2122   1              {
2123   2                      if(pScript[0]==0x0c)
2124   2                      {
2125   3                              bHeatTopReq     =       0;                                              //关闭顶部加热
2126   3                      }
2127   2                      else    //pScript[0]==0x0d
2128   2                      {
2129   3                              bHeatArdReq     =       0;                                              //关闭侧部加热
2130   3                      }
2131   2              }
2132   1      }
2133          
2134          
2135          /*-----------------------------------------------------------------------------*
2136           *  Function Description:                                                      *
2137           *      特殊跳转处理                                                                       *
2138           *  Parameters:                                                                *
2139           *      pScript，脚本数据                                                      *
2140           *  Return                                                                     *
2141           *      None                                                                   *
2142           *----------------------------------------------------------------------------*/
2143          uint8   OtherCmds(uint8 code *pScript)
2144          {
2145   1          uint8       u8TopDegree     =       ADCGetData(AD_CH_TOP);
2146   1          uint8       u8ChReq = 0;    //跳转标志位
2147   1              uint8   u8ExtStage = 0xff;
2148   1              
2149   1              switch(pScript[1])
2150   1              {
2151   2                      case    1:                                                                      //结束当前状态，进入保温模式
2152   2                                      EnterWarm();
2153   2                      bWarm_Start = 1;
2154   2                      bSys1S_CookTime = 1;                //立即刷新显示
2155   2                      PlaySound(MusicCookEnd);
2156   2                                      break;
2157   2                      case    2:                                                                      //烹饪时间倒计时
2158   2                                      if((tmCookTime[0]==59)&&(tmCookTime[1]==0)&&(tmCookTime[2]==0))
2159   2                                      {
2160   3                                              tmCookTime[0]   =       59;
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 36  

2161   3                                              tmCookTime[1]   =       g_u16VarParam[COUNTDOWN_TIME]%60;
2162   3                                              tmCookTime[2]   =       g_u16VarParam[COUNTDOWN_TIME]/60;
2163   3                          if((m_u8CookMode!=FUNC_ID_CHICKPEAS)&&(m_u8CookMode!=FUNC_ID_BEANS))
2164   3                          {
2165   4                                                  PlaySound(MusicCountDown);
2166   4                          }
2167   3                                      }
2168   2                                      break;
2169   2                      case    3:              
2170   2                              //--------------------------------------------------
2171   2                                      //加热时间计算
2172   2                                      if(pScript[2]==0)       
2173   2                                      {
2174   3                                              //---------------煮粥维持沸腾火力---------------
2175   3                                              if(pScript[3]==0)
2176   3                                              {
2177   4                                                      if(g_u16RelayTime)
2178   4                                                      {
2179   5                                                              m_u8AddOnParam  =       g_u16RelayTime/60;
2180   5                                                      }
2181   4                                                      else
2182   4                                                      {
2183   5                                                              m_u8AddOnParam  =       16;             //热锅维持功率
2184   5                                                      }
2185   4                                                      m_u8AddOffParam         =       0;      
2186   4                                              }
2187   3                                              
2188   3      //                                      if(bSys_1000MS) m_u16MashTime++;        
2189   3                                              
2190   3                                              //----------------煮饭糊化小火力------------------
2191   3                                              if(pScript[3]==1)
2192   3                                              {
2193   4                                                      m_u8AddOnParam  =       g_u16RelayTime/120;
2194   4                                                      if(m_u8AddOnParam<8)    m_u8AddOnParam = 8;
2195   4                                                      if(m_u8AddOnParam>12)   m_u8AddOnParam = 12;
2196   4      //                                              if((bBoilReach)&&(m_u8BoilDegree<=90))  //高原判断
2197   4      //                                              {
2198   4      //                                                      m_u8AddOnParam = m_u8AddOnParam - 2;
2199   4      //                                              }
2200   4                                                      m_u8AddOffParam = 30 - m_u8AddOnParam;  
2201   4                                              }
2202   3                                              
2203   3                                              //----------------煮饭糊化大火力------------------
2204   3                                              if(pScript[3]==2)
2205   3                                              {
2206   4                                                      m_u8AddOnParam  =       g_u16RelayTime/60;
2207   4                                                      if(m_u8AddOnParam<12)   m_u8AddOnParam = 12;
2208   4                                                      if(m_u8AddOnParam>20)   m_u8AddOnParam = 20;
2209   4                                                      m_u8AddOffParam = 30 - m_u8AddOnParam;  
2210   4                                              }
2211   3                                      }
2212   2                                      
2213   2      //                //--------------------------------------------------
2214   2      //                              //功率递减(粥&&稀饭&&汤)
2215   2      //                              if(pScript[2]==1)                                       
2216   2      //                              {                       
2217   2      //                                      if(bSys_1000MS) m_u16IntCookTime++;
2218   2      //                                      
2219   2      //                                      //-----------------粥-----------------------
2220   2      //                                      if(m_u8CookMode==4)
2221   2      //                                      {
2222   2      //                                      if(m_u16IntCookTime>=240)               //4min
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 37  

2223   2      //                                              {
2224   2      //                                                  m_u16IntCookTime = 0;
2225   2      //                                                //m_u8AddOnParam      -= 1;
2226   2      //                                                      m_u8AddOffParam += 2;
2227   2      //                                              }
2228   2      //                                              if(m_u8AddOnParam<16)   m_u8AddOnParam  = 16;
2229   2      //                                              if(m_u8AddOnParam>28)   m_u8AddOnParam  = 28;
2230   2      //                                              if(m_u8AddOffParam>16)  m_u8AddOffParam = 16;
2231   2      //                                  }
2232   2      //                                      
2233   2      //                                      //-----------------稀饭---------------------
2234   2      //                                      if(m_u8CookMode==5)
2235   2      //                                      {
2236   2      //                                      if(m_u16IntCookTime>=300)               //5min
2237   2      //                                              {
2238   2      //                                                  m_u16IntCookTime = 0;
2239   2      //                                                  m_u8AddOnParam      -= 1;
2240   2      //                                                      m_u8AddOffParam += 2;
2241   2      //                                              }
2242   2      //                                              if(m_u8AddOnParam<12)   m_u8AddOnParam  = 12;
2243   2      //                                              if(m_u8AddOnParam>20)   m_u8AddOnParam  = 20;
2244   2      //                                              if(m_u8AddOffParam>20)  m_u8AddOffParam = 20;
2245   2      //                                  }
2246   2      //                                              
2247   2      //                                      //-----------------汤-----------------------
2248   2      //                                      if(m_u8CookMode==7)
2249   2      //                                      {
2250   2      //                                          if(m_u16IntCookTime>=480)           //8min
2251   2      //                                              {
2252   2      //                                                      m_u16IntCookTime = 0;
2253   2      //                                                      m_u8AddOnParam  -= 1;
2254   2      //                                                      m_u8AddOffParam += 2;
2255   2      //                                              }
2256   2      //                                              if(m_u8AddOnParam<20)   m_u8AddOnParam  = 20;
2257   2      //                                              if(m_u8AddOnParam>40)   m_u8AddOnParam  = 40;
2258   2      //                                              if(m_u8AddOffParam>12)  m_u8AddOffParam = 12;
2259   2      //                                      }
2260   2      //                              }
2261   2                                              
2262   2                                      //--------------------------------------------------
2263   2                                      //设定火力控制初始值
2264   2                                      if(pScript[2]==2)                                       
2265   2                                      {
2266   3                                              m_u8EstimateTemp        =       pScript[3];                             //预估温度初始值
2267   3                                              m_u8AddOnParam          =       g_u16RelayTime/60+10;   //功率初始值
2268   3                                              if(m_u8AddOnParam>24)   m_u8AddOnParam  =       24;
2269   3                                              if(m_u8AddOnParam<12)   m_u8AddOnParam  =       12;
2270   3                                              m_u8AddOffParam =       30-m_u8AddOnParam;              
2271   3                                      }
2272   2      
2273   2                      //--------------------------------------------------
2274   2                                      //根据温差调整火力
2275   2                                      if(pScript[2]==3)
2276   2                                      {
2277   3                                              m_u8TargetTemp          =       pScript[3];     
2278   3                                              
2279   3                                              //-----------------煮饭-------------------------
2280   3                                              if(pScript[4]==1)                                               
2281   3                                              {
2282   4                                                      if(m_u8TargetTemp==85)                          //目标温度85度
2283   4                                                      {
2284   5                                                              if(u8TopDegree>72)      
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 38  

2285   5                                                              {
2286   6                                                                      m_u8OffsetTemp  =       2;              //上盖温度大于72度,偏移温度2
2287   6                                                              }
2288   5                                                              else
2289   5                                                              {
2290   6                                                                      m_u8OffsetTemp  =       4;              //上盖温度小于72度,偏移温度4
2291   6                                                              }
2292   5                                                              m_u8OnTimeDec   =       3;                      //加热时间减少量3S
2293   5                                                              m_u8OnTimeInc   =       2;                      //加热时间增加量2S
2294   5                                                              m_u8MinOnTime_Set       =       10;             //最小加热时间10S
2295   5                                                              m_u8MaxOnTime_set       =       30;             //最大加热时间30S
2296   5                                                              m_u8PwrCycle    =       30;                     //调功周期30S                                                   
2297   5                                                      }
2298   4                                              
2299   4                                                      if(m_u8TargetTemp==98)                          //目标温度98度
2300   4                                                      {
2301   5                                                              m_u8OffsetTemp  =       1;                      //偏移温度1
2302   5                                                              m_u8OnTimeDec   =       1;          //加热时间减少量1S
2303   5                                                              m_u8OnTimeInc   =       1;          //加热时间增加量1S
2304   5                                                              m_u8MinOnTime_Set       =       8;      //最小加热时间8S
2305   5                                                              m_u8MaxOnTime_set       =       g_u16RelayTime/60+3;     //最大加热时间=继电器打开时间+3S
2306   5                                                              if(m_u8MaxOnTime_set>20)        
2307   5                                                              {
2308   6                                                                      m_u8MaxOnTime_set = 20;
2309   6                                                              }
2310   5                                                              m_u8PwrCycle    =       30;                     //调功周期30S
2311   5                                                      }
2312   4                                              }
2313   3                                              
2314   3                                              //-------------------粥&&稀饭&&煲汤-------------------------
2315   3                                              if(pScript[4]==2)                                               
2316   3                                              {
2317   4                                                      if(m_u8TargetTemp==90)                          //目标温度90度
2318   4                                                      {
2319   5                                                              if(u8TopDegree>78)      
2320   5                                                              {
2321   6                                                                      m_u8OffsetTemp  =       2;              //上盖温度大于78度,偏移温度2
2322   6                                                                      m_u8MaxOnTime_set       =       20;     //最大加热时间20S
2323   6                                                              }
2324   5                                                              else
2325   5                                                              {
2326   6                                                                      m_u8OffsetTemp  =       3;              //上盖温度小于78度,偏移温度3
2327   6                                                                      m_u8MaxOnTime_set       =       30;     //最大加热时间30S
2328   6                                                              }
2329   5                                                              m_u8OnTimeDec   =       3;                      //加热时间减少量3S
2330   5                                                              m_u8OnTimeInc   =       2;                      //加热时间增加量2S
2331   5                                                              m_u8MinOnTime_Set       =       12;             //最小加热时间12S
2332   5                                                              m_u8PwrCycle    =       30;                     //调功周期30S
2333   5                                                      }
2334   4                                              }
2335   3                                              GetPowerByDT();                                                 //根据温差调功
2336   3                                      }
2337   2                                      break;
2338   2                  case    4:                  //外部控制跳转
2339   2                                      if(bTimeCountDown)
2340   2                                      {
2341   3                                              u8ChReq = 1;
2342   3                                              u8ExtStage = 2; //pasta 按下开始键
2343   3                                      }
2344   2                                      break;
2345   2                      default:
2346   2                                      break;
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 39  

2347   2              }
2348   1              
2349   1              if(u8ChReq)
2350   1              {
2351   2                      return    u8ExtStage;
2352   2              }
2353   1              return  0xff;
2354   1      }
2355          
2356          /*-----------------------------------------------------------------------------*
2357           *  Function Description:                                                      *
2358           *      根据温差调整功率                                                                       *
2359           *  Parameters:                                                                *
2360           *      None                                                                   *
2361           *  Return                                                                     *
2362           *      None                                                                   *
2363           *----------------------------------------------------------------------------*/
2364          void    GetPowerByDT(void)
2365          {
2366   1              uint8   u8TopDegree     =       ADCGetData(AD_CH_TOP);
2367   1              
2368   1              if(bSys_1000MS) m_u16IntCookTime++;
2369   1              if(m_u16IntCookTime>=30)                //调功周期30S
2370   1              {
2371   2                      m_u16IntCookTime        =       0;
2372   2                      m_u8EstimateTemp        +=      m_u8OffsetTemp;
2373   2      
2374   2              if(m_u8EstimateTemp>m_u8TargetTemp)
2375   2                      {
2376   3                              m_u8EstimateTemp =      m_u8TargetTemp;
2377   3                      }
2378   2                      
2379   2                      //顶部温度大于预期值,加热时间缩短
2380   2                      if(u8TopDegree>m_u8EstimateTemp)
2381   2                      {
2382   3                              m_u8AddOnParam  -=      m_u8OnTimeDec;          
2383   3                      }
2384   2                      
2385   2                      //顶部温度小于预期值,加热时间增加
2386   2                      if(u8TopDegree<m_u8EstimateTemp)
2387   2                      {
2388   3                              m_u8AddOnParam  +=      m_u8OnTimeInc;
2389   3                      }
2390   2                      
2391   2                      //判断加热时间是否正确
2392   2                      if(m_u8AddOnParam>m_u8MaxOnTime_set)
2393   2                      {
2394   3                              m_u8AddOnParam  =       m_u8MaxOnTime_set;
2395   3                      }
2396   2                      
2397   2                      if(m_u8AddOnParam<m_u8MinOnTime_Set)
2398   2                      {
2399   3                              m_u8AddOnParam  =       m_u8MinOnTime_Set;
2400   3                      }
2401   2                      
2402   2                      if(m_u8PwrCycle>m_u8AddOnParam)
2403   2                      {
2404   3                              m_u8AddOffParam =       m_u8PwrCycle-m_u8AddOnParam;    
2405   3                      }
2406   2                      else
2407   2                      {
2408   3                              m_u8AddOffParam =       0;
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 40  

2409   3                      }
2410   2                      
2411   2                      //更新预期值    
2412   2                      m_u8EstimateTemp        =       u8TopDegree;    
2413   2              }
2414   1      }
2415           
2416          /*-----------------------------------------------------------------------------*
2417           *  Function Description:                                                      *
2418           *      沸腾检测                                                               *
2419           *  Parameters:                                                                *
2420           *      None                                                                   *
2421           *  Return                                                                     *
2422           *      None                                                                   *
2423           *----------------------------------------------------------------------------*/
2424          //void  BoilCheckProc(void)
2425          //{
2426          //      uint8   u8TopDegree     =       ADCGetData(AD_CH_TOP);
2427          //      uint8   i;
2428          
2429          //      if(bBoilChk_EN)
2430          //      {
2431          //              if(bSys_1000MS) m_u8BoilChkTime++;
2432          
2433          //              if(m_u8BoilChkTime>=60/BOIL_DATA_PER_MIN)                                                                       
2434          //              {
2435          //                      m_u8BoilChkTime =       0;
2436          //      
2437          //                      for(i=0;i<BOIL_TEMP_SIZE-1;i++)                 //填充缓冲区            
2438          //                      {
2439          //                              u8BoilTempBuf[i]        =       u8BoilTempBuf[i+1];             
2440          //                      }
2441          //                      u8BoilTempBuf[BOIL_TEMP_SIZE-1] =       u8TopDegree;
2442          
2443          //                      for(i=0;i<BOIL_TEMP_SIZE;i++)                   //备份缓冲区
2444          //                      {
2445          //                              u8BoilTempBufBAK[i]     =       u8BoilTempBuf[i];
2446          //                      }                               
2447          
2448          //                      u8BoilChkCnt++;                                                 
2449          
2450          //                      if(u8BoilChkCnt== BOIL_TEMP_SIZE)               //判断是否填充完成
2451          //                      {
2452          //                              u8BoilChkCnt = u8BoilChkCnt - 1;
2453          
2454          //                              Sort8(u8BoilTempBufBAK,BOIL_TEMP_SIZE); //排序
2455          
2456          //                              if((u8BoilTempBufBAK[BOIL_TEMP_SIZE-1]-u8BoilTempBufBAK[0])<BOIL_OFFSET_VAL)
2457          //                              {                       
2458          //                                      bBoilReach      =       1;
2459          //                                      m_u8BoilDegree  =       u8TopDegree;    
2460          //                                      //PlaySound(MusicCookEnd);                      //已沸腾提示    
2461          //                              }                               
2462          //                      }
2463          //              }
2464          //      }       
2465          
2466          //      if(bBoilReach)          
2467          //      {
2468          //              if(u8TopDegree>m_u8BoilDegree)
2469          //              {
2470          //                      m_u8BoilDegree  =       u8TopDegree;      //更新沸点
C51 COMPILER V9.52.0.0   SCRIPT                                                            12/24/2015 16:42:54 PAGE 41  

2471          //              }
2472          //      }
2473          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2799    ----
   CONSTANT SIZE    =   2571    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      19
   IDATA SIZE       =     24    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
